# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-22 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/tutorials/raster_api_tut.rst:5
msgid "Raster API tutorial"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:8
msgid "Opening the File"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:10
msgid ""
"Before opening a GDAL supported raster datastore it is necessary to register "
"drivers. There is a driver for each supported format. Normally this is "
"accomplished with the :cpp:func:`GDALAllRegister` function which attempts to "
"register all known drivers, including those auto-loaded from .so files "
"using :cpp:func:`GDALDriverManager::AutoLoadDrivers`. If for some "
"applications it is necessary to limit the set of drivers it may be helpful "
"to review the code from gdalallregister.cpp. Python automatically calls "
"GDALAllRegister() when the gdal module is imported."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:12
msgid ""
"Once the drivers are registered, the application should call the free "
"standing :cpp:func:`GDALOpen` function to open a dataset, passing the name "
"of the dataset and the access desired (GA_ReadOnly or GA_Update)."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:14
#: ../../../source/tutorials/raster_api_tut.rst:98
#: ../../../source/tutorials/raster_api_tut.rst:163
#: ../../../source/tutorials/raster_api_tut.rst:241
#: ../../../source/tutorials/raster_api_tut.rst:314
#: ../../../source/tutorials/raster_api_tut.rst:369
#: ../../../source/tutorials/raster_api_tut.rst:410
#: ../../../source/tutorials/raster_api_tut.rst:458
#: ../../../source/tutorials/raster_api_tut.rst:485
msgid "In C++:"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:16
msgid ""
"#include \"gdal_priv.h\"\n"
"\n"
"#include <errno.h>\n"
"\n"
"int main(int argc, const char* argv[])\n"
"{\n"
"    if (argc != 2) {\n"
"        return EINVAL;\n"
"    }\n"
"    const char* pszFilename = argv[1];\n"
"\n"
"    GDALDatasetUniquePtr poDataset;\n"
"    GDALAllRegister();\n"
"    const GDALAccess eAccess = GA_ReadOnly;\n"
"    poDataset = GDALDatasetUniquePtr(GDALDataset::"
"FromHandle(GDALOpen( pszFilename, eAccess )));\n"
"    if( !poDataset )\n"
"    {\n"
"        ...; // handle error\n"
"    }\n"
"    return 0;\n"
"}"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:40
#: ../../../source/tutorials/raster_api_tut.rst:119
#: ../../../source/tutorials/raster_api_tut.rst:190
#: ../../../source/tutorials/raster_api_tut.rst:254
#: ../../../source/tutorials/raster_api_tut.rst:332
#: ../../../source/tutorials/raster_api_tut.rst:383
#: ../../../source/tutorials/raster_api_tut.rst:426
#: ../../../source/tutorials/raster_api_tut.rst:467
#: ../../../source/tutorials/raster_api_tut.rst:506
msgid "In C:"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:42
msgid ""
"#include \"gdal.h\"\n"
"#include \"cpl_conv.h\" /* for CPLMalloc() */\n"
"\n"
"#include <errno.h>\n"
"\n"
"int main(int argc, const char* argv[])\n"
"{\n"
"    if (argc != 2) {\n"
"        return EINVAL;\n"
"    }\n"
"    const char* pszFilename = argv[1];\n"
"\n"
"    GDALDatasetH  hDataset;\n"
"    GDALAllRegister();\n"
"    const GDALAccess eAccess = GA_ReadOnly;\n"
"    hDataset = GDALOpen( pszFilename, eAccess );\n"
"    if( hDataset == NULL )\n"
"    {\n"
"        ...; // handle error\n"
"    }\n"
"    return 0;\n"
"}"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:67
#: ../../../source/tutorials/raster_api_tut.rst:143
#: ../../../source/tutorials/raster_api_tut.rst:217
#: ../../../source/tutorials/raster_api_tut.rst:267
#: ../../../source/tutorials/raster_api_tut.rst:349
#: ../../../source/tutorials/raster_api_tut.rst:396
#: ../../../source/tutorials/raster_api_tut.rst:442
#: ../../../source/tutorials/raster_api_tut.rst:476
#: ../../../source/tutorials/raster_api_tut.rst:529
msgid "In Python:"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:69
msgid ""
"from osgeo import gdal\n"
"dataset = gdal.Open(filename, gdal.GA_ReadOnly)\n"
"if not dataset:\n"
"    ..."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:76
msgid ""
"Note that if :cpp:func:`GDALOpen` returns NULL it means the open failed, and "
"that an error messages will already have been emitted via :cpp:func:"
"`CPLError`. If you want to control how errors are reported to the user "
"review the :cpp:func:`CPLError` documentation. Generally speaking all of "
"GDAL uses :cpp:func:`CPLError` for error reporting. Also, note that "
"pszFilename need not actually be the name of a physical file (though it "
"usually is). It's interpretation is driver dependent, and it might be an "
"URL, a filename with additional parameters added at the end controlling the "
"open or almost anything. Please try not to limit GDAL file selection dialogs "
"to only selecting physical files."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:79
msgid "Getting Dataset Information"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:81
msgid ""
"As described in the :ref:`raster_data_model`, a :cpp:class:`GDALDataset` "
"contains a list of raster bands, all pertaining to the same area, and having "
"the same resolution. It also has metadata, a coordinate system, a "
"georeferencing transform, size of raster and various other information."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:83
msgid ""
"In the particular, but common, case of a \"north up\" image without any "
"rotation or shearing, the georeferencing transform :ref:`geotransforms_tut` "
"takes the following form :"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:85
msgid ""
"adfGeoTransform[0] /* top left x */\n"
"adfGeoTransform[1] /* w-e pixel resolution */\n"
"adfGeoTransform[2] /* 0 */\n"
"adfGeoTransform[3] /* top left y */\n"
"adfGeoTransform[4] /* 0 */\n"
"adfGeoTransform[5] /* n-s pixel resolution (negative value) */"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:94
msgid "In the general case, this is an affine transform."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:96
msgid ""
"If we wanted to print some general information about the dataset we might do "
"the following:"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:100
msgid ""
"double        adfGeoTransform[6];\n"
"printf( \"Driver: %s/%s\\n\",\n"
"        poDataset->GetDriver()->GetDescription(),\n"
"        poDataset->GetDriver()->GetMetadataItem( GDAL_DMD_LONGNAME ) );\n"
"printf( \"Size is %dx%dx%d\\n\",\n"
"        poDataset->GetRasterXSize(), poDataset->GetRasterYSize(),\n"
"        poDataset->GetRasterCount() );\n"
"if( poDataset->GetProjectionRef()  != NULL )\n"
"    printf( \"Projection is `%s'\\n\", poDataset->GetProjectionRef() );\n"
"if( poDataset->GetGeoTransform( adfGeoTransform ) == CE_None )\n"
"{\n"
"    printf( \"Origin = (%.6f,%.6f)\\n\",\n"
"            adfGeoTransform[0], adfGeoTransform[3] );\n"
"    printf( \"Pixel Size = (%.6f,%.6f)\\n\",\n"
"            adfGeoTransform[1], adfGeoTransform[5] );\n"
"}"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:121
msgid ""
"GDALDriverH   hDriver;\n"
"double        adfGeoTransform[6];\n"
"hDriver = GDALGetDatasetDriver( hDataset );\n"
"printf( \"Driver: %s/%s\\n\",\n"
"        GDALGetDriverShortName( hDriver ),\n"
"        GDALGetDriverLongName( hDriver ) );\n"
"printf( \"Size is %dx%dx%d\\n\",\n"
"        GDALGetRasterXSize( hDataset ),\n"
"        GDALGetRasterYSize( hDataset ),\n"
"        GDALGetRasterCount( hDataset ) );\n"
"if( GDALGetProjectionRef( hDataset ) != NULL )\n"
"    printf( \"Projection is `%s'\\n\", GDALGetProjectionRef( hDataset ) );\n"
"if( GDALGetGeoTransform( hDataset, adfGeoTransform ) == CE_None )\n"
"{\n"
"    printf( \"Origin = (%.6f,%.6f)\\n\",\n"
"            adfGeoTransform[0], adfGeoTransform[3] );\n"
"    printf( \"Pixel Size = (%.6f,%.6f)\\n\",\n"
"            adfGeoTransform[1], adfGeoTransform[5] );\n"
"}"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:145
msgid ""
"print(\"Driver: {}/{}\".format(dataset.GetDriver().ShortName,\n"
"                            dataset.GetDriver().LongName))\n"
"print(\"Size is {} x {} x {}\".format(dataset.RasterXSize,\n"
"                                    dataset.RasterYSize,\n"
"                                    dataset.RasterCount))\n"
"print(\"Projection is {}\".format(dataset.GetProjection()))\n"
"geotransform = dataset.GetGeoTransform()\n"
"if geotransform:\n"
"    print(\"Origin = ({}, {})\".format(geotransform[0], geotransform[3]))\n"
"    print(\"Pixel Size = ({}, {})\".format(geotransform[1], geotransform[5]))"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:159
msgid "Fetching a Raster Band"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:161
msgid ""
"At this time access to raster data via GDAL is done one band at a time. "
"Also, there is metadata, block sizes, color tables, and various other "
"information available on a band by band basis. The following codes fetches "
"a :cpp:class:`GDALRasterBand` object from the dataset (numbered 1 through :"
"cpp:func:`GDALRasterBand::GetRasterCount`) and displays a little information "
"about it."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:165
msgid ""
"GDALRasterBand  *poBand;\n"
"int             nBlockXSize, nBlockYSize;\n"
"int             bGotMin, bGotMax;\n"
"double          adfMinMax[2];\n"
"poBand = poDataset->GetRasterBand( 1 );\n"
"poBand->GetBlockSize( &nBlockXSize, &nBlockYSize );\n"
"printf( \"Block=%dx%d Type=%s, ColorInterp=%s\\n\",\n"
"        nBlockXSize, nBlockYSize,\n"
"        GDALGetDataTypeName(poBand->GetRasterDataType()),\n"
"        GDALGetColorInterpretationName(\n"
"            poBand->GetColorInterpretation()) );\n"
"adfMinMax[0] = poBand->GetMinimum( &bGotMin );\n"
"adfMinMax[1] = poBand->GetMaximum( &bGotMax );\n"
"if( ! (bGotMin && bGotMax) )\n"
"    GDALComputeRasterMinMax((GDALRasterBandH)poBand, TRUE, adfMinMax);\n"
"printf( \"Min=%.3fd, Max=%.3f\\n\", adfMinMax[0], adfMinMax[1] );\n"
"if( poBand->GetOverviewCount() > 0 )\n"
"    printf( \"Band has %d overviews.\\n\", poBand->GetOverviewCount() );\n"
"if( poBand->GetColorTable() != NULL )\n"
"    printf( \"Band has a color table with %d entries.\\n\",\n"
"            poBand->GetColorTable()->GetColorEntryCount() );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:192
msgid ""
"GDALRasterBandH hBand;\n"
"int             nBlockXSize, nBlockYSize;\n"
"int             bGotMin, bGotMax;\n"
"double          adfMinMax[2];\n"
"hBand = GDALGetRasterBand( hDataset, 1 );\n"
"GDALGetBlockSize( hBand, &nBlockXSize, &nBlockYSize );\n"
"printf( \"Block=%dx%d Type=%s, ColorInterp=%s\\n\",\n"
"        nBlockXSize, nBlockYSize,\n"
"        GDALGetDataTypeName(GDALGetRasterDataType(hBand)),\n"
"        GDALGetColorInterpretationName(\n"
"            GDALGetRasterColorInterpretation(hBand)) );\n"
"adfMinMax[0] = GDALGetRasterMinimum( hBand, &bGotMin );\n"
"adfMinMax[1] = GDALGetRasterMaximum( hBand, &bGotMax );\n"
"if( ! (bGotMin && bGotMax) )\n"
"    GDALComputeRasterMinMax( hBand, TRUE, adfMinMax );\n"
"printf( \"Min=%.3fd, Max=%.3f\\n\", adfMinMax[0], adfMinMax[1] );\n"
"if( GDALGetOverviewCount(hBand) > 0 )\n"
"    printf( \"Band has %d overviews.\\n\", GDALGetOverviewCount(hBand));\n"
"if( GDALGetRasterColorTable( hBand ) != NULL )\n"
"    printf( \"Band has a color table with %d entries.\\n\",\n"
"            GDALGetColorEntryCount(\n"
"                GDALGetRasterColorTable( hBand ) ) );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:219
msgid ""
"band = dataset.GetRasterBand(1)\n"
"print(\"Band Type={}\".format(gdal.GetDataTypeName(band.DataType)))\n"
"\n"
"min = band.GetMinimum()\n"
"max = band.GetMaximum()\n"
"if not min or not max:\n"
"    (min,max) = band.ComputeRasterMinMax(True)\n"
"print(\"Min={:.3f}, Max={:.3f}\".format(min,max))\n"
"\n"
"if band.GetOverviewCount() > 0:\n"
"    print(\"Band has {} overviews\".format(band.GetOverviewCount()))\n"
"\n"
"if band.GetRasterColorTable():\n"
"    print(\"Band has a color table with {} entries\".format(band."
"GetRasterColorTable().GetCount()))"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:237
msgid "Reading Raster Data"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:239
msgid ""
"There are a few ways to read raster data, but the most common is via the :"
"cpp:func:`GDALRasterBand::RasterIO` method. This method will automatically "
"take care of data type conversion, up/down sampling and windowing. The "
"following code will read the first scanline of data into a similarly sized "
"buffer, converting it to floating point as part of the operation."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:243
msgid ""
"float *pafScanline;\n"
"int   nXSize = poBand->GetXSize();\n"
"pafScanline = (float *) CPLMalloc(sizeof(float)*nXSize);\n"
"poBand->RasterIO( GF_Read, 0, 0, nXSize, 1,\n"
"                pafScanline, nXSize, 1, GDT_Float32,\n"
"                0, 0 );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:252
#: ../../../source/tutorials/raster_api_tut.rst:265
msgid ""
"The pafScanline buffer should be freed with CPLFree() when it is no longer "
"used."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:256
msgid ""
"float *pafScanline;\n"
"int   nXSize = GDALGetRasterBandXSize( hBand );\n"
"pafScanline = (float *) CPLMalloc(sizeof(float)*nXSize);\n"
"GDALRasterIO( hBand, GF_Read, 0, 0, nXSize, 1,\n"
"            pafScanline, nXSize, 1, GDT_Float32,\n"
"            0, 0 );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:269
msgid ""
"scanline = band.ReadRaster(xoff=0, yoff=0,\n"
"                        xsize=band.XSize, ysize=1,\n"
"                        buf_xsize=band.XSize, buf_ysize=1,\n"
"                        buf_type=gdal.GDT_Float32)"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:276
msgid ""
"Note that the returned scanline is of type string, and contains xsize*4 "
"bytes of raw binary floating point data. This can be converted to Python "
"values using the struct module from the standard library:"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:278
msgid ""
"import struct\n"
"tuple_of_floats = struct.unpack('f' * b2.XSize, scanline)"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:283
msgid "The RasterIO call takes the following arguments."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:285
msgid ""
"CPLErr GDALRasterBand::RasterIO( GDALRWFlag eRWFlag,\n"
"                                int nXOff, int nYOff, int nXSize, int "
"nYSize,\n"
"                                void * pData, int nBufXSize, int nBufYSize,\n"
"                                GDALDataType eBufType,\n"
"                                int nPixelSpace,\n"
"                                int nLineSpace )"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:294
msgid ""
"Note that the same RasterIO() call is used to read, or write based on the "
"setting of eRWFlag (either GF_Read or GF_Write). The nXOff, nYOff, nXSize, "
"nYSize argument describe the window of raster data on disk to read (or "
"write). It doesn't have to fall on tile boundaries though access may be more "
"efficient if it does."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:296
msgid ""
"The pData is the memory buffer the data is read into, or written from. It's "
"real type must be whatever is passed as eBufType, such as GDT_Float32, or "
"GDT_Byte. The RasterIO() call will take care of converting between the "
"buffer's data type and the data type of the band. Note that when converting "
"floating point data to integer RasterIO() rounds down, and when converting "
"source values outside the legal range of the output the nearest legal value "
"is used. This implies, for instance, that 16bit data read into a GDT_Byte "
"buffer will map all values greater than 255 to 255, the data is not scaled!"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:298
msgid ""
"The nBufXSize and nBufYSize values describe the size of the buffer. When "
"loading data at full resolution this would be the same as the window size. "
"However, to load a reduced resolution overview this could be set to smaller "
"than the window on disk. In this case the RasterIO() will utilize overviews "
"to do the IO more efficiently if the overviews are suitable."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:300
msgid ""
"The nPixelSpace, and nLineSpace are normally zero indicating that default "
"values should be used. However, they can be used to control access to the "
"memory data buffer, allowing reading into a buffer containing other pixel "
"interleaved data for instance."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:303
msgid "Closing the Dataset"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:305
msgid ""
"Please keep in mind that :cpp:class:`GDALRasterBand` objects are owned by "
"their dataset, and they should never be destroyed with the C++ delete "
"operator. :cpp:class:`GDALDataset`'s can be closed by calling :cpp:func:"
"`GDALClose` (it is NOT recommended to use the delete operator on a "
"GDALDataset for Windows users because of known issues when allocating and "
"freeing memory across module boundaries. See the relevant topic on the FAQ). "
"Calling GDALClose will result in proper cleanup, and flushing of any pending "
"writes. Forgetting to call GDALClose on a dataset opened in update mode in a "
"popular format like GTiff will likely result in being unable to open it "
"afterwards."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:308
msgid "Techniques for Creating Files"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:310
msgid ""
"New files in GDAL supported formats may be created if the format driver "
"supports creation. There are two general techniques for creating files, "
"using CreateCopy() and Create(). The CreateCopy method involves calling the "
"CreateCopy() method on the format driver, and passing in a source dataset "
"that should be copied. The Create method involves calling the Create() "
"method on the driver, and then explicitly writing all the metadata, and "
"raster data with separate calls. All drivers that support creating new files "
"support the CreateCopy() method, but only a few support the Create() method."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:312
msgid ""
"To determine if a particular format supports Create or CreateCopy it is "
"possible to check the DCAP_CREATE and DCAP_CREATECOPY metadata on the format "
"driver object. Ensure that :cpp:func:`GDALAllRegister` has been called "
"before calling :cpp:func:`GDALDriverManager::GetDriverByName`. In this "
"example we fetch a driver, and determine whether it supports Create() and/or "
"CreateCopy()."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:316
msgid ""
"#include \"cpl_string.h\"\n"
"...\n"
"    const char *pszFormat = \"GTiff\";\n"
"    GDALDriver *poDriver;\n"
"    char **papszMetadata;\n"
"    poDriver = GetGDALDriverManager()->GetDriverByName(pszFormat);\n"
"    if( poDriver == NULL )\n"
"        exit( 1 );\n"
"    papszMetadata = poDriver->GetMetadata();\n"
"    if( CSLFetchBoolean( papszMetadata, GDAL_DCAP_CREATE, FALSE ) )\n"
"        printf( \"Driver %s supports Create() method.\\n\", pszFormat );\n"
"    if( CSLFetchBoolean( papszMetadata, GDAL_DCAP_CREATECOPY, FALSE ) )\n"
"        printf( \"Driver %s supports CreateCopy() method.\\n\", pszFormat );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:334
msgid ""
"#include \"cpl_string.h\"\n"
"...\n"
"const char *pszFormat = \"GTiff\";\n"
"GDALDriverH hDriver = GDALGetDriverByName( pszFormat );\n"
"char **papszMetadata;\n"
"if( hDriver == NULL )\n"
"    exit( 1 );\n"
"papszMetadata = GDALGetMetadata( hDriver, NULL );\n"
"if( CSLFetchBoolean( papszMetadata, GDAL_DCAP_CREATE, FALSE ) )\n"
"    printf( \"Driver %s supports Create() method.\\n\", pszFormat );\n"
"if( CSLFetchBoolean( papszMetadata, GDAL_DCAP_CREATECOPY, FALSE ) )\n"
"    printf( \"Driver %s supports CreateCopy() method.\\n\", pszFormat );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:351
msgid ""
"fileformat = \"GTiff\"\n"
"driver = gdal.GetDriverByName(fileformat)\n"
"metadata = driver.GetMetadata()\n"
"if metadata.get(gdal.DCAP_CREATE) == \"YES\":\n"
"    print(\"Driver {} supports Create() method.\".format(fileformat))\n"
"\n"
"if metadata.get(gdal.DCAP_CREATECOPY) == \"YES\":\n"
"    print(\"Driver {} supports CreateCopy() method.\".format(fileformat))"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:362
msgid ""
"Note that a number of drivers are read-only and won't support Create() or "
"CreateCopy()."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:365
msgid "Using CreateCopy()"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:367
msgid ""
"The :cpp:func:`GDALDriver::CreateCopy` method can be used fairly simply as "
"most information is collected from the source dataset. However, it includes "
"options for passing format specific creation options, and for reporting "
"progress to the user as a long dataset copy takes place. A simple copy from "
"the a file named pszSrcFilename, to a new file named pszDstFilename using "
"default options on a format whose driver was previously fetched might look "
"like this:"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:371
msgid ""
"GDALDataset *poSrcDS =\n"
"(GDALDataset *) GDALOpen( pszSrcFilename, GA_ReadOnly );\n"
"GDALDataset *poDstDS;\n"
"poDstDS = poDriver->CreateCopy( pszDstFilename, poSrcDS, FALSE,\n"
"                                NULL, NULL, NULL );\n"
"/* Once we're done, close properly the dataset */\n"
"if( poDstDS != NULL )\n"
"    GDALClose( (GDALDatasetH) poDstDS );\n"
"GDALClose( (GDALDatasetH) poSrcDS );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:385
msgid ""
"GDALDatasetH hSrcDS = GDALOpen( pszSrcFilename, GA_ReadOnly );\n"
"GDALDatasetH hDstDS;\n"
"hDstDS = GDALCreateCopy( hDriver, pszDstFilename, hSrcDS, FALSE,\n"
"                        NULL, NULL, NULL );\n"
"/* Once we're done, close properly the dataset */\n"
"if( hDstDS != NULL )\n"
"    GDALClose( hDstDS );\n"
"GDALClose(hSrcDS);"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:398
msgid ""
"src_ds = gdal.Open(src_filename)\n"
"dst_ds = driver.CreateCopy(dst_filename, src_ds, strict=0)\n"
"# Once we're done, close properly the dataset\n"
"dst_ds = None\n"
"src_ds = None"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:406
msgid ""
"Note that the CreateCopy() method returns a writable dataset, and that it "
"must be closed properly to complete writing and flushing the dataset to "
"disk. In the Python case this occurs automatically when \"dst_ds\" goes out "
"of scope. The FALSE (or 0) value used for the bStrict option just after the "
"destination filename in the CreateCopy() call indicates that the "
"CreateCopy() call should proceed without a fatal error even if the "
"destination dataset cannot be created to exactly match the input dataset. "
"This might be because the output format does not support the pixel datatype "
"of the input dataset, or because the destination cannot support writing "
"georeferencing for instance."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:408
msgid ""
"A more complex case might involve passing creation options, and using a "
"predefined progress monitor like this:"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:412
msgid ""
"#include \"cpl_string.h\"\n"
"...\n"
"char **papszOptions = NULL;\n"
"papszOptions = CSLSetNameValue( papszOptions, \"TILED\", \"YES\" );\n"
"papszOptions = CSLSetNameValue( papszOptions, \"COMPRESS\", \"PACKBITS\" );\n"
"poDstDS = poDriver->CreateCopy( pszDstFilename, poSrcDS, FALSE,\n"
"                                papszOptions, GDALTermProgress, NULL );\n"
"/* Once we're done, close properly the dataset */\n"
"if( poDstDS != NULL )\n"
"    GDALClose( (GDALDatasetH) poDstDS );\n"
"CSLDestroy( papszOptions );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:428
msgid ""
"#include \"cpl_string.h\"\n"
"...\n"
"char **papszOptions = NULL;\n"
"papszOptions = CSLSetNameValue( papszOptions, \"TILED\", \"YES\" );\n"
"papszOptions = CSLSetNameValue( papszOptions, \"COMPRESS\", \"PACKBITS\" );\n"
"hDstDS = GDALCreateCopy( hDriver, pszDstFilename, hSrcDS, FALSE,\n"
"                        papszOptions, GDALTermProgres, NULL );\n"
"/* Once we're done, close properly the dataset */\n"
"if( hDstDS != NULL )\n"
"    GDALClose( hDstDS );\n"
"CSLDestroy( papszOptions );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:444
msgid ""
"src_ds = gdal.Open(src_filename)\n"
"dst_ds = driver.CreateCopy(dst_filename, src_ds, strict=0,\n"
"                        options=[\"TILED=YES\", \"COMPRESS=PACKBITS\"])\n"
"# Once we're done, close properly the dataset\n"
"dst_ds = None\n"
"src_ds = None"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:454
msgid "Using Create()"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:456
msgid ""
"For situations in which you are not just exporting an existing file to a new "
"file, it is generally necessary to use the :cpp:func:`GDALDriver::Create` "
"method (though some interesting options are possible through use of virtual "
"files or in-memory files). The Create() method takes an options list much "
"like CreateCopy(), but the image size, number of bands and band type must be "
"provided explicitly."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:460
msgid ""
"GDALDataset *poDstDS;\n"
"char **papszOptions = NULL;\n"
"poDstDS = poDriver->Create( pszDstFilename, 512, 512, 1, GDT_Byte,\n"
"                            papszOptions );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:469
msgid ""
"GDALDatasetH hDstDS;\n"
"char **papszOptions = NULL;\n"
"hDstDS = GDALCreate( hDriver, pszDstFilename, 512, 512, 1, GDT_Byte,\n"
"                    papszOptions );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:478
msgid ""
"dst_ds = driver.Create(dst_filename, xsize=512, ysize=512,\n"
"                    bands=1, eType=gdal.GDT_Byte)"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:483
msgid ""
"Once the dataset is successfully created, all appropriate metadata and "
"raster data must be written to the file. What this is will vary according to "
"usage, but a simple case with a projection, geotransform and raster data is "
"covered here."
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:487
msgid ""
"double adfGeoTransform[6] = { 444720, 30, 0, 3751320, 0, -30 };\n"
"OGRSpatialReference oSRS;\n"
"char *pszSRS_WKT = NULL;\n"
"GDALRasterBand *poBand;\n"
"GByte abyRaster[512*512];\n"
"poDstDS->SetGeoTransform( adfGeoTransform );\n"
"oSRS.SetUTM( 11, TRUE );\n"
"oSRS.SetWellKnownGeogCS( \"NAD27\" );\n"
"oSRS.exportToWkt( &pszSRS_WKT );\n"
"poDstDS->SetProjection( pszSRS_WKT );\n"
"CPLFree( pszSRS_WKT );\n"
"poBand = poDstDS->GetRasterBand(1);\n"
"poBand->RasterIO( GF_Write, 0, 0, 512, 512,\n"
"                abyRaster, 512, 512, GDT_Byte, 0, 0 );\n"
"/* Once we're done, close properly the dataset */\n"
"GDALClose( (GDALDatasetH) poDstDS );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:508
msgid ""
"double adfGeoTransform[6] = { 444720, 30, 0, 3751320, 0, -30 };\n"
"OGRSpatialReferenceH hSRS;\n"
"char *pszSRS_WKT = NULL;\n"
"GDALRasterBandH hBand;\n"
"GByte abyRaster[512*512];\n"
"GDALSetGeoTransform( hDstDS, adfGeoTransform );\n"
"hSRS = OSRNewSpatialReference( NULL );\n"
"OSRSetUTM( hSRS, 11, TRUE );\n"
"OSRSetWellKnownGeogCS( hSRS, \"NAD27\" );\n"
"OSRExportToWkt( hSRS, &pszSRS_WKT );\n"
"OSRDestroySpatialReference( hSRS );\n"
"GDALSetProjection( hDstDS, pszSRS_WKT );\n"
"CPLFree( pszSRS_WKT );\n"
"hBand = GDALGetRasterBand( hDstDS, 1 );\n"
"GDALRasterIO( hBand, GF_Write, 0, 0, 512, 512,\n"
"            abyRaster, 512, 512, GDT_Byte, 0, 0 );\n"
"/* Once we're done, close properly the dataset */\n"
"GDALClose( hDstDS );"
msgstr ""

#: ../../../source/tutorials/raster_api_tut.rst:531
msgid ""
"from osgeo import osr\n"
"import numpy\n"
"dst_ds.SetGeoTransform([444720, 30, 0, 3751320, 0, -30])\n"
"srs = osr.SpatialReference()\n"
"srs.SetUTM(11, 1)\n"
"srs.SetWellKnownGeogCS(\"NAD27\")\n"
"dst_ds.SetProjection(srs.ExportToWkt())\n"
"raster = numpy.zeros((512, 512), dtype=numpy.uint8)\n"
"dst_ds.GetRasterBand(1).WriteArray(raster)\n"
"# Once we're done, close properly the dataset\n"
"dst_ds = None"
msgstr ""
