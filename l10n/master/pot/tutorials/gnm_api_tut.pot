# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-22 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/tutorials/gnm_api_tut.rst:5
msgid "GNM API tutorial"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:9
msgid ""
"This document is intended to describe using the GNM C++ classes to work with "
"networks. It is advised to read the :ref:`gnm_data_model` before to "
"understand the purpose and structure of GNM classes."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:12
msgid "Managing networks"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:14
msgid ""
"In the first example we will create a small water network on the base of the "
"set of spatial data (two shapefiles: pipes and wells which are situated at "
"the GDAL source tree: autotest\\\\gnm\\\\data). The use of the common "
"network format - :cpp:class:`GNMGdalNetwork` class - will allow us to select "
"one of the GDAL-supported vector formats for our network - ESRI Shapefile. "
"After the creation we will build a topology and add some additional data: "
"pumps layer, in order to manually edit network topology."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:16
msgid ""
"Initially we register GDAL drivers and create some options (string pairs), "
"which will be passed as parameters during network creation. Here we create a "
"network's name."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:18
msgid ""
"#include \"gnm.h\"\n"
"#include <vector>\n"
"\n"
"int main ()\n"
"{\n"
"    GDALAllRegister();\n"
"\n"
"    char **papszDSCO = NULL;\n"
"    papszDSCO = CSLAddNameValue(papszDSCO, GNM_MD_NAME, "
"\"my_pipes_network\");\n"
"    papszDSCO = CSLAddNameValue(papszDSCO, GNM_MD_SRS, \"EPSG:4326\");\n"
"    papszDSCO = CSLAddNameValue(papszDSCO, GNM_MD_DESCR, \"My pipes "
"network\");\n"
"    papszDSCO = CSLAddNameValue(papszDSCO, GNM_MD_FORMAT, \"ESRI "
"Shapefile\");"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:33
msgid ""
"Some options are obligatory. The following parameters must be specified "
"during the network creation: the path/name; format of network storage; "
"spatial reference system (EPSG, WKT, etc.). The according dataset with the "
"\"network part\" will be created and the resulting network will be returned."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:36
msgid ""
"GDALDriver *poDriver = GetGDALDriverManager()-"
">GetDriverByName(\"GNMFile\");\n"
"GNMGenericNetwork* poDS = (GNMGenericNetwork*) poDriver->Create( \"..\\"
"\\network_data\", 0, 0, 0, GDT_Unknown,\n"
"                                                   papszDSCO );\n"
"CSLDestroy(papszDSCO);"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:43
msgid ""
"For now we have a void network consisted of only \"system layers\". We need "
"to populate it with \"class layers\" full of features, so we open a certain "
"foreign dataset and copy layers from it to our network. Note, that we use "
"GDALDataset:: methods for working with \"class layers\", because :cpp:class:"
"`GNMNetwork` inherited from GDALDataset."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:45
msgid ""
"GDALDataset *poSrcDS = (GDALDataset*) GDALOpenEx(\"..\\\\in_data\",\n"
"                                GDAL_OF_VECTOR | GDAL_OF_READONLY, NULL, "
"NULL, NULL );\n"
"\n"
"OGRLayer *poSrcLayer1 = poSrcDS->GetLayerByName(\"pipes\");\n"
"OGRLayer *poSrcLayer2 = poSrcDS->GetLayerByName(\"wells\");\n"
"\n"
"poDS->CopyLayer(poSrcLayer1, \"pipes\");\n"
"poDS->CopyLayer(poSrcLayer2, \"wells\");\n"
"\n"
"GDALClose(poSrcDS);"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:58
msgid ""
"After the successful copying we have the network full of features, but with "
"no topology. The features were added and registered in the network but they "
"are still not connected with each other. Now it is time to build the network "
"topology. There are two ways of doing this in GNM: manually or "
"automatically. In the most cases automatic building is more convenient, "
"while manual is useful for small editings. Automatic building requires some "
"parameters: we must specify which \"class layers\" will participate in "
"topology building (we select our two layers), a snap tolerance, direct and "
"inverse cost, direction, which is equal 0.00005 in our case. If the building "
"will be successful the network's graph will be filled with the according "
"connections."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:61
msgid ""
"printf(\"\\nBuilding network topology ...\\n\");\n"
"char **papszLayers = NULL;\n"
"for(int i = 0; i < poDS->GetLayerCount(); ++i)\n"
"{\n"
"    OGRLayer* poLayer = poDS->GetLayer(i);\n"
"    papszLayers = CSLAddString(papszLayers, poLayer->GetName() );\n"
"}\n"
"\n"
"if(poGenericNetwork->ConnectPointsByLines(papszLayers, dfTolerance,\n"
"                                    dfDirCost, dfInvCost, eDir) != "
"CE_None )\n"
"{\n"
"    printf(\"Building topology failed\\n\");\n"
"}\n"
"else\n"
"{\n"
"    printf(\"Topology has been built successfully\\n\");\n"
"}"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:81
msgid ""
"At this point we have a ready network with topological and spatial data, "
"which can be used now for different purposes (analysis, converting into "
"different formats, etc). But sometimes it is necessary to modify some "
"network's data. For example we need to add additional features and attach "
"them to our built topology (modify topology). We create a new \"class "
"layer\" in the network and add one feature to it."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:83
msgid ""
"OGRLayer *poNewLayer = poDS->CreateLayer(\"pumps\", , NULL, wkbPoint, "
"NULL );\n"
"if( poNewLayer == NULL )\n"
"{\n"
"    printf( \"Layer creation failed.\\n\" );\n"
"    exit( 1 );\n"
"}\n"
"\n"
"OGRFieldDefn fieldDefn (\"pressure\",OFTReal);\n"
"if( poNewLayer->CreateField( &fieldDefn ) != OGRERR_NONE )\n"
"{\n"
"    printf( \"Creating Name field failed.\\n\" );\n"
"    exit( 1 );\n"
"}\n"
"\n"
"OGRFeature *poFeature = OGRFeature::CreateFeature(poNewLayer-"
">GetLayerDefn());\n"
"OGRPoint pt;\n"
"pt.setX(37.291466);\n"
"pt.setY(55.828351);\n"
"poFeature->SetGeometry(&pt);\n"
"if( poNewLayer->CreateFeature( poFeature ) != OGRERR_NONE )\n"
"{\n"
"    printf( \"Failed to create feature.\\n\" );\n"
"    exit( 1 );\n"
"}\n"
"\n"
"GNMGFID gfid = poFeature->GetFID();\n"
"\n"
"OGRFeature::DestroyFeature( poFeature );"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:114
msgid ""
"After the successful creation the feature will be registered in the network "
"and we can connect it with others. There can be two possible ways to do "
"this. In the first case we need a real feature which will be an edge in the "
"connection, while in the second case we do not need such feature, and "
"passing -1 into the :cpp:func:`GNMGenericNetwork::ConnectFeatures` method "
"means that the special system edge will be created for this connection and "
"added to the graph automatically. In our case we had added only one point "
"feature and we have not got the line one to be an edge, so we will use the "
"\"virtual\" connection. We pass the GFID of our point as the source, the "
"GFID of one of the existed features as the target and -1 as the connector. "
"Note that we also set the costs (direct and inverse) and the direction of "
"our edge manually and these values will be written to the graph. When we "
"used the automatic connection (which also uses ConnectFeatures() internally) "
"such vales were set automatically according to the rule which we also set "
"before."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:117
msgid ""
"if (poDS->ConnectFeatures(gfid ,63, -1, 5.0, 5.0, GNMDirection_SrcToTgt) != "
"GNMError_None)\n"
"{\n"
"    printf(\"Can not connect features\\n\");\n"
"}"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:124
msgid ""
"After all we correctly close the network which frees the allocated resources."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:127
msgid "GDALClose(poDS);"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:131
#: ../../../source/tutorials/gnm_api_tut.rst:299
msgid "All in one block:"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:134
msgid ""
"#include \"gnm.h\"\n"
"#include \"gnm_priv.h\"\n"
"\n"
"int main ()\n"
"{\n"
"    GDALAllRegister();\n"
"\n"
"    char **papszDSCO = NULL;\n"
"    papszDSCO = CSLAddNameValue(papszDSCO, GNM_MD_NAME, "
"\"my_pipes_network\");\n"
"    papszDSCO = CSLAddNameValue(papszDSCO, GNM_MD_SRS, \"EPSG:4326\");\n"
"    papszDSCO = CSLAddNameValue(papszDSCO, GNM_MD_DESCR, \"My pipes "
"network\");\n"
"    papszDSCO = CSLAddNameValue(papszDSCO, GNM_MD_FORMAT, \"ESRI "
"Shapefile\");\n"
"\n"
"\n"
"    GDALDriver *poDriver = GetGDALDriverManager()-"
">GetDriverByName(\"GNMFile\");\n"
"    GNMGenericNetwork* poDS = (GNMGenericNetwork*) poDriver->Create( \"..\\"
"\\network_data\", 0, 0, 0, GDT_Unknown,\n"
"                                                    papszDSCO );\n"
"    CSLDestroy(papszDSCO);\n"
"    if (poDS == NULL)\n"
"    {\n"
"        printf(\"Failed to create network\\n\");\n"
"        exit(1);\n"
"    }\n"
"\n"
"    GDALDataset *poSrcDS = (GDALDataset*) GDALOpenEx(\"..\\\\in_data\","
"GDAL_OF_VECTOR | GDAL_OF_READONLY, NULL, NULL, NULL );\n"
"    if(poSrcDS == NULL)\n"
"    {\n"
"        printf(\"Can not open source dataset at\\n\");\n"
"        exit(1);\n"
"    }\n"
"\n"
"    OGRLayer *poSrcLayer1 = poSrcDS->GetLayerByName(\"pipes\");\n"
"    OGRLayer *poSrcLayer2 = poSrcDS->GetLayerByName(\"wells\");\n"
"    if (poSrcLayer1 == NULL || poSrcLayer2 == NULL)\n"
"    {\n"
"        printf(\"Can not process layers of source dataset\\n\");\n"
"        exit(1);\n"
"    }\n"
"\n"
"    poDS->CopyLayer(poSrcLayer1, \"pipes\");\n"
"    poDS->CopyLayer(poSrcLayer2, \"wells\");\n"
"\n"
"    GDALClose(poSrcDS);\n"
"\n"
"    printf(\"\\nBuilding network topology ...\\n\");\n"
"    char **papszLayers = NULL;\n"
"    for(int i = 0; i < poDS->GetLayerCount(); ++i)\n"
"    {\n"
"        OGRLayer* poLayer = poDS->GetLayer(i);\n"
"        papszLayers = CSLAddString(papszLayers, poLayer->GetName() );\n"
"    }\n"
"\n"
"    if(poGenericNetwork->ConnectPointsByLines(papszLayers, dfTolerance,\n"
"                                        dfDirCost, dfInvCost, eDir) != "
"CE_None )\n"
"    {\n"
"        printf(\"Building topology failed\\n\");\n"
"        exit(1);\n"
"    }\n"
"    else\n"
"    {\n"
"        printf(\"Topology has been built successfully\\n\");\n"
"    }\n"
"\n"
"    OGRLayer *poNewLayer = poDS->CreateLayer(\"pumps\", , NULL, wkbPoint, "
"NULL );\n"
"    if( poNewLayer == NULL )\n"
"    {\n"
"        printf( \"Layer creation failed.\\n\" );\n"
"        exit( 1 );\n"
"    }\n"
"\n"
"    OGRFieldDefn fieldDefn (\"pressure\",OFTReal);\n"
"    if( poNewLayer->CreateField( &fieldDefn ) != OGRERR_NONE )\n"
"    {\n"
"        printf( \"Creating Name field failed.\\n\" );\n"
"        exit( 1 );\n"
"    }\n"
"\n"
"    OGRFeature *poFeature = OGRFeature::CreateFeature(poNewLayer-"
">GetLayerDefn());\n"
"    OGRPoint pt;\n"
"    pt.setX(37.291466);\n"
"    pt.setY(55.828351);\n"
"    poFeature->SetGeometry(&pt);\n"
"    if( poNewLayer->CreateFeature( poFeature ) != OGRERR_NONE )\n"
"    {\n"
"        printf( \"Failed to create feature.\\n\" );\n"
"        exit( 1 );\n"
"    }\n"
"\n"
"    GNMGFID gfid = poFeature->GetFID();\n"
"\n"
"    OGRFeature::DestroyFeature( poFeature );\n"
"\n"
"    if (poDS->ConnectFeatures(gfid ,63, -1, 5.0, 5.0, "
"GNMDirection_SrcToTgt) != GNMError_None)\n"
"    {\n"
"        printf(\"Can not connect features\\n\");\n"
"    }\n"
"\n"
"    GDALClose(poDS);\n"
"}"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:237
msgid "Analysing networks"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:239
msgid ""
"In the second example we will analyse the network which we have built in the "
"first example. We will calculate the shortest path between two points via "
"Dijkstra algorithm performing the feature blockings and saving the resulting "
"path into the file."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:241
msgid ""
"Initially we open our network, passing the path to its Shapefile dataset."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:243
msgid ""
"#include \"gnm.h\"\n"
"#include \"gnm_priv.h\"\n"
"\n"
"int main ()\n"
"{\n"
"    GDALAllRegister();\n"
"\n"
"    GNMGenericNetwork *poNet = (GNMGenericNetwork*) GDALOpenEx(\"..\\"
"\\network_data\",GDAL_OF_GNM | GDAL_OF_UPDATE, NULL, NULL, NULL );\n"
"    if(poSrcDS == NULL)\n"
"    {\n"
"        printf(\"Can not open source dataset at\\n\");\n"
"        exit(1);\n"
"    }"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:259
msgid ""
"Before any calculations we open the dataset which will hold the layer with "
"the resulting path."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:262
msgid ""
"GDALDataset *poResDS;\n"
"poResDS = (GDALDataset*) GDALOpenEx(\"..\\\\out_data\",\n"
"                                    GDAL_OF_VECTOR | GDAL_OF_UPDATE,\n"
"                                    NULL, NULL, NULL);\n"
"if (poResDS == NULL)\n"
"{\n"
"    printf(\"Failed to open resulting dataset\\n\");\n"
"    exit(1);\n"
"}"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:275
msgid ""
"Finally we use the Dijkstra shortest path method to calculations. This path "
"will be found passing over the blocked feature and saved into internal "
"memory OGRLayer, which we copy to the real dataset. Now it can be visualized "
"by GIS."
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:278
msgid ""
"    OGRLayer *poResLayer = poNet->GetPath(64, 41, GATDijkstraShortestPath, "
"NULL);\n"
"    if (poResLayer == NULL)\n"
"    {\n"
"        printf(\"Failed to save or calculate path\\n\");\n"
"    }\n"
"    else if (poResDS->CopyLayer(poResLayer, \"shp_tutorial.shp\") == NULL)\n"
"    {\n"
"        printf(\"Failed to save path to the layer\\n\");\n"
"    }\n"
"    else\n"
"    {\n"
"        printf(\"Path saved successfully\\n\");\n"
"    }\n"
"\n"
"    GDALClose(poResDS);\n"
"    poNet->ReleaseResultSet(poRout);\n"
"    GDALClose(poNet);\n"
"}"
msgstr ""

#: ../../../source/tutorials/gnm_api_tut.rst:302
msgid ""
"#include \"gnm.h\"\n"
"#include \"gnmstdanalysis.h\"\n"
"\n"
"int main ()\n"
"{\n"
"    GDALAllRegister();\n"
"\n"
"    GNMGenericNetwork *poNet = (GNMGenericNetwork*) GDALOpenEx(\"..\\"
"\\network_data\",\n"
"                                                    GDAL_OF_GNM | "
"GDAL_OF_UPDATE,\n"
"                                                    NULL, NULL, NULL );\n"
"    if(poSrcDS == NULL)\n"
"    {\n"
"        printf(\"Can not open source dataset at\\n\");\n"
"        exit(1);\n"
"    }\n"
"\n"
"    GDALDataset *poResDS;\n"
"    poResDS = (GDALDataset*) GDALOpenEx(\"..\\\\out_data\",\n"
"                                        GDAL_OF_VECTOR | GDAL_OF_UPDATE,\n"
"                                        NULL, NULL, NULL);\n"
"    if (poResDS == NULL)\n"
"    {\n"
"        printf(\"Failed to open resulting dataset\\n\");\n"
"        exit(1);\n"
"    }\n"
"\n"
"    poNet->ChangeBlockState(36, true);\n"
"\n"
"    OGRLayer *poResLayer = poNet->GetPath(64, 41, GATDijkstraShortestPath, "
"NULL);\n"
"    if (poResLayer == NULL)\n"
"    {\n"
"        printf(\"Failed to save or calculate path\\n\");\n"
"    }\n"
"    else if (poResDS->CopyLayer(poResLayer, \"shp_tutorial.shp\") == NULL)\n"
"    {\n"
"        printf(\"Failed to save path to the layer\\n\");\n"
"    }\n"
"    else\n"
"    {\n"
"        printf(\"Path saved successfully\\n\");\n"
"    }\n"
"\n"
"    GDALClose(poResDS);\n"
"    poNet->ReleaseResultSet(poRout);\n"
"    GDALClose(poNet);\n"
"}"
msgstr ""
