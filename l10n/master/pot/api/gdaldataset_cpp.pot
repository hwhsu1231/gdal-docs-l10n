# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-22 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/api/gdaldataset_cpp.rst:5
msgid "GDALDataset C++ API"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:0
msgid "Public Functions"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:-1
msgid ""
"MyDataset::~MyDataset()\n"
"{\n"
"   try\n"
"   {\n"
"       MyDataset::Close();\n"
"   }\n"
"   catch (const std::exception &exc)\n"
"   {\n"
"       // If Close() can throw exception\n"
"       CPLError(CE_Failure, CPLE_AppDefined,\n"
"                \"Exception thrown in MyDataset::Close(): %s\",\n"
"                exc.what());\n"
"   }\n"
"   catch (...)\n"
"   {\n"
"       // If Close() can throw exception\n"
"       CPLError(CE_Failure, CPLE_AppDefined,\n"
"                \"Exception thrown in MyDataset::Close()\");\n"
"   }\n"
"}\n"
"\n"
"CPLErr MyDataset::Close()\n"
"{\n"
"    CPLErr eErr = CE_None;\n"
"    if( nOpenFlags != OPEN_FLAGS_CLOSED )\n"
"    {\n"
"        if( MyDataset::FlushCache(true) != CE_None )\n"
"            eErr = CE_Failure;\n"
"\n"
"        // Do something driver specific\n"
"        if (m_fpImage)\n"
"        {\n"
"            if( VSIFCloseL(m_fpImage) != 0 )\n"
"            {\n"
"                CPLError(CE_Failure, CPLE_FileIO, \"VSIFCloseL() failed\");\n"
"                eErr = CE_Failure;\n"
"            }\n"
"        }\n"
"\n"
"        // Call parent Close() implementation.\n"
"        if( MyParentDatasetClass::Close() != CE_None )\n"
"            eErr = CE_Failure;\n"
"    }\n"
"    return eErr;\n"
"}"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:0
msgid "Returns"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:0
msgid "Parameters"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:-1
msgid ""
"for( auto&& poBand: poDS->GetBands() )\n"
"{\n"
"      std::cout << \"Band  << poBand->GetDescription() << std::endl;\n"
"}"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:-1
msgid ""
"Xp = padfTransform[0] + P*padfTransform[1] + L*padfTransform[2];\n"
"Yp = padfTransform[3] + P*padfTransform[4] + L*padfTransform[5];"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:-1
msgid ""
"const CPLStringList aosFormats =\n"
"   poDataset->GetCompressionFormats(0, 0,\n"
"                                    poDataset->GetRasterXSize(),\n"
"                                    poDataset->GetRasterYSize(),\n"
"                                    poDataset->GetRasterCount(),\n"
"                                    nullptr);\n"
"for( const char* pszFormat: aosFormats )\n"
"{\n"
"   // Remove optional parameters and just print out the MIME type.\n"
"   const CPLStringList aosTokens(CSLTokenizeString2(pszFormat, \";\", 0));\n"
"   printf(\"Found format %s\\n, aosTokens[0]);\n"
"}"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:-1
msgid ""
"void* pBuffer = nullptr;\n"
"size_t nBufferSize = 0;\n"
"CPLErr eErr =\n"
"   poDataset->ReadCompressedData(\"JPEG\",\n"
"                                 0, 0,\n"
"                                 poDataset->GetRasterXSize(),\n"
"                                 poDataset->GetRasterYSize(),\n"
"                                 poDataset->GetRasterCount(),\n"
"                                 nullptr, // panBandList\n"
"                                 &pBuffer,\n"
"                                 &nBufferSize,\n"
"                                 nullptr // ppszDetailedFormat\n"
"                                );\n"
"if (eErr == CE_None)\n"
"{\n"
"    CPLAssert(pBuffer != nullptr);\n"
"    CPLAssert(nBufferSize > 0);\n"
"    VSILFILE* fp = VSIFOpenL(\"my.jpeg\", \"wb\");\n"
"    if (fp)\n"
"    {\n"
"        VSIFWriteL(pBuffer, nBufferSize, 1, fp);\n"
"        VSIFCloseL(fp);\n"
"    }\n"
"    VSIFree(pBuffer);\n"
"}"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:-1
msgid ""
"size_t nUpperBoundBufferSize = 0;\n"
"CPLErr eErr =\n"
"   poDataset->ReadCompressedData(\"JPEG\",\n"
"                                 0, 0,\n"
"                                 poDataset->GetRasterXSize(),\n"
"                                 poDataset->GetRasterYSize(),\n"
"                                 poDataset->GetRasterCount(),\n"
"                                 nullptr, // panBandList\n"
"                                 nullptr, // ppBuffer,\n"
"                                 &nUpperBoundBufferSize,\n"
"                                 nullptr // ppszDetailedFormat\n"
"                                );\n"
"if (eErr == CE_None)\n"
"{\n"
"    std::vector<uint8_t> myBuffer;\n"
"    myBuffer.resize(nUpperBoundBufferSize);\n"
"    void* pBuffer = myBuffer.data();\n"
"    size_t nActualSize = nUpperBoundBufferSize;\n"
"    char* pszDetailedFormat = nullptr;\n"
"    // We also request detailed format, but we could have passed it to\n"
"    // nullptr as well.\n"
"    eErr =\n"
"      poDataset->ReadCompressedData(\"JPEG\",\n"
"                                    0, 0,\n"
"                                    poDataset->GetRasterXSize(),\n"
"                                    poDataset->GetRasterYSize(),\n"
"                                    poDataset->GetRasterCount(),\n"
"                                    nullptr, // panBandList\n"
"                                    &pBuffer,\n"
"                                    &nActualSize,\n"
"                                    &pszDetailedFormat);\n"
"    if (eErr == CE_None)\n"
"    {\n"
"       CPLAssert(pBuffer == myBuffer.data()); // pointed value not modified\n"
"       CPLAssert(nActualSize <= nUpperBoundBufferSize);\n"
"       myBuffer.resize(nActualSize);\n"
"       // do something useful\n"
"       VSIFree(pszDetailedFormat);\n"
"    }\n"
"}"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:-1
msgid ""
"int       anOverviewList[3] = { 2, 4, 8 };\n"
"\n"
"poDataset->BuildOverviews( \"NEAREST\", 3, anOverviewList, 0, nullptr,\n"
"                           GDALDummyProgress, nullptr );"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:-1
msgid ""
"for( auto&& poLayer: poDS->GetLayers() )\n"
"{\n"
"      std::cout << \"Layer  << poLayer->GetName() << std::endl;\n"
"}"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:-1
msgid ""
"for( auto&& oFeatureLayerPair: poDS->GetFeatures() )\n"
"{\n"
"      std::cout << \"Feature of layer \" <<\n"
"              oFeatureLayerPair.layer->GetName() << std::endl;\n"
"      oFeatureLayerPair.feature->DumpReadable();\n"
"}"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:-1
msgid ""
"#include \"gdal.h\"\n"
"#include \"cpl_string.h\"\n"
"\n"
"...\n"
"\n"
"        OGRLayer *poLayer;\n"
"        char     **papszOptions;\n"
"\n"
"        if( !poDS->TestCapability( ODsCCreateLayer ) )\n"
"        {\n"
"        ...\n"
"        }\n"
"\n"
"        papszOptions = CSLSetNameValue( papszOptions, \"DIM\", \"2\" );\n"
"        poLayer = poDS->CreateLayer( \"NewLayer\", nullptr, wkbUnknown,\n"
"                                     papszOptions );\n"
"        CSLDestroy( papszOptions );\n"
"\n"
"        if( poLayer == NULL )\n"
"        {\n"
"            ...\n"
"        }"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:0
msgid "Public Static Functions"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:0
msgid "Public Members"
msgstr ""

#: ../../../source/api/gdaldataset_cpp.rst:0
msgid "Public Types"
msgstr ""
