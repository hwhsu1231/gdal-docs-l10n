# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-22 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/api/csharp/csharp_raster.rst:5
msgid "C# Raster Interface"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:7
msgid ""
"The GDAL C# interface supports transferring raster data between the C# "
"application and GDAL."
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:9
msgid ""
"The various :file:`Band.ReadRaster`, :file:`Band.WriteRaster`, :file:"
"`Dataset.ReadRaster`, :file:`Dataset.WriteRaster` overloads are involved in "
"transferring raster data between the managed and the unmanaged parts of the "
"application."
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:12
msgid ""
"This page will summarize the main aspects of raster data handling related "
"exclusively to the C# interface."
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:14
msgid ""
"The :file:`Band` class contains the following :file:`ReadRaster`/:file:"
"`WriteRaster` overloads:"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:16
msgid ""
"public CPLErr ReadRaster(int xOff, int yOff, int xSize, int ySize, byte[] "
"buffer,\n"
"    int buf_xSize, int buf_ySize, int pixelSpace, int lineSpace){}\n"
"\n"
"public CPLErr WriteRaster(int xOff, int yOff, int xSize, int ySize, byte[] "
"buffer,\n"
"    int buf_xSize, int buf_ySize, int pixelSpace, int lineSpace){}\n"
"\n"
"public CPLErr ReadRaster(int xOff, int yOff, int xSize, int ySize, short[] "
"buffer,\n"
"    int buf_xSize, int buf_ySize, int pixelSpace, int lineSpace){}\n"
"\n"
"public CPLErr WriteRaster(int xOff, int yOff, int xSize, int ySize, short[] "
"buffer,\n"
"    int buf_xSize, int buf_ySize, int pixelSpace, int lineSpace){}\n"
"\n"
"public CPLErr ReadRaster(int xOff, int yOff, int xSize, int ySize, int[] "
"buffer,\n"
"    int buf_xSize, int buf_ySize, int pixelSpace, int lineSpace){}\n"
"\n"
"public CPLErr WriteRaster(int xOff, int yOff, int xSize, int ySize, int[] "
"buffer,\n"
"    int buf_xSize, int buf_ySize, int pixelSpace, int lineSpace){}\n"
"\n"
"public CPLErr ReadRaster(int xOff, int yOff, int xSize, int ySize, float[] "
"buffer,\n"
"    int buf_xSize, int buf_ySize, int pixelSpace, int lineSpace){}\n"
"\n"
"public CPLErr WriteRaster(int xOff, int yOff, int xSize, int ySize, float[] "
"buffer,\n"
"    int buf_xSize, int buf_ySize, int pixelSpace, int lineSpace){}\n"
"\n"
"public CPLErr ReadRaster(int xOff, int yOff, int xSize, int ySize, double[] "
"buffer,\n"
"    int buf_xSize, int buf_ySize, int pixelSpace, int lineSpace){}\n"
"\n"
"public CPLErr WriteRaster(int xOff, int yOff, int xSize, int ySize, double[] "
"buffer,\n"
"    int buf_xSize, int buf_ySize, int pixelSpace, int lineSpace){}\n"
"\n"
"public CPLErr ReadRaster(int xOff, int yOff, int xSize, int ySize, IntPtr "
"buffer, i\n"
"    nt buf_xSize, int buf_ySize, DataType buf_type, int pixelSpace, int "
"lineSpace){}\n"
"\n"
"public CPLErr WriteRaster(int xOff, int yOff, int xSize, int ySize, IntPtr "
"buffer,\n"
"    int buf_xSize, int buf_ySize, DataType buf_type, int pixelSpace, int "
"lineSpace){}"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:54
msgid ""
"The only difference between these functions is the actual type of the buffer "
"parameter. The last 2 overloads are the generic overloads and the caller "
"should write the proper marshaling code for the buffer holding the raster "
"data. The overloads that have a C# array as the buffer parameter implement "
"the proper marshaling code for the caller."
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:60
msgid "Reading the raster image"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:62
msgid ""
"When reading raster data from GDAL, the user will probably create a .NET "
"image to hold C# representation of the data. The raster data can be read "
"directly or in a buffered fashion."
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:66
msgid "Using the buffered read approach"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:68
msgid ""
"When reading the image this way the C# API will copy the image data between "
"the C and the C# arrays:"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:70
msgid ""
"// Creating a Bitmap to store the GDAL image in\n"
"Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format32bppRgb);\n"
"// Creating a C# array to hold the image data\n"
"byte[] r = new byte[width * height];\n"
"band.ReadRaster(0, 0, width, height, r, width, height, 0, 0);\n"
"// Copying the pixels into the C# bitmap\n"
"int i, j;\n"
"for (i = 0; i< width; i++)\n"
"{\n"
"    for (j=0; j<height; j++)\n"
"    {\n"
"        Color newColor = Color.FromArgb(Convert.ToInt32(r[i+j*width]),"
"Convert.ToInt32(r[i+j*width]), Convert.ToInt32(r[i+j*width]));\n"
"                bitmap.SetPixel(i, j, newColor);\n"
"    }\n"
"}"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:88
msgid ""
"In this case the interface implementation uses an internally created "
"unmanaged array to transfer the data between the C and C++ part of the code, "
"like:"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:90
msgid ""
"public CPLErr ReadRaster(int xOff, int yOff, int xSize, int ySize, byte[] "
"buffer, int buf_xSize, int buf_ySize, int pixelSpace, int lineSpace) {\n"
"    CPLErr retval;\n"
"    IntPtr ptr = Marshal.AllocHGlobal(buf_xSize * buf_ySize * Marshal."
"SizeOf(buffer[0]));\n"
"    try {\n"
"        retval = ReadRaster(xOff, yOff, xSize, ySize, ptr, buf_xSize, "
"buf_ySize, DataType.GDT_Byte, pixelSpace, lineSpace);\n"
"        Marshal.Copy(ptr, buffer, 0, buf_xSize * buf_ySize);\n"
"    } finally {\n"
"        Marshal.FreeHGlobal(ptr);\n"
"    }\n"
"    GC.KeepAlive(this);\n"
"    return retval;\n"
"}"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:106
msgid "Using the direct read approach"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:108
msgid ""
"Raster data can be read into the C# bitmap directly using the following "
"approach:"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:110
msgid ""
"// Creating a Bitmap to store the GDAL image in\n"
"Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format8bppIndexed);\n"
"// Obtaining the bitmap buffer\n"
"BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, width, height), "
"ImageLockMode.ReadWrite, PixelFormat.Format8bppIndexed);\n"
"try\n"
"{\n"
"    int stride = bitmapData.Stride;\n"
"    IntPtr buf = bitmapData.Scan0;\n"
"    band.ReadRaster(0, 0, width, height, buf, width, height, DataType."
"GDT_Byte, 1, stride);\n"
"}\n"
"finally\n"
"{\n"
"    bitmap.UnlockBits(bitmapData);\n"
"}"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:127
msgid ""
"This approach is more performant than the previous since there's no need to "
"allocate an intermediary array for transferring the data."
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:130
msgid "Using /unsafe code and the fixed statement"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:132
msgid ""
"In the previous examples the programmer could ignore bothering with "
"implementing the marshaling code for the raster arrays. Both of the examples "
"prevent the garbage collector from relocating the array during the execution "
"of the P/Invoke call. Without using an intermediary array the programmer can "
"also use the following method to read the raster data:"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:136
msgid ""
"byte[] buffer = new byte[width * height];\n"
"fixed (IntPtr ptr = buffer) {\n"
"band.ReadRaster(0, 0, width, height, ptr, width, height, 1, width);\n"
"}"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:143
msgid ""
"When using this approach the application must be compiled using the :program:"
"`/unsafe` command line option."
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:146
msgid "Using indexed / grayscale images"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:148
msgid ""
"The :file:`PaletteInterp` enumeration can be used to distinguish between the "
"various type of the image color interpretations."
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:150
msgid ""
"Band band = dataset.GetRasterBand(1);\n"
"ColorTable ct = band.GetRasterColorTable();\n"
"if (ct.GetPaletteInterpretation() == PaletteInterp.GPI_RGB)\n"
"{\n"
"    Console.WriteLine(\"   This raster band has RGB palette interpretation!"
"\");\n"
"}"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:159
msgid ""
"When reading images with indexed color representations, the programmer might "
"have to do some extra work copying the palette over:"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:161
msgid ""
"// Get the GDAL Band objects from the Dataset\n"
"Band band = dataset.GetRasterBand(1);\n"
"ColorTable ct = band.GetRasterColorTable();\n"
"// Create a Bitmap to store the GDAL image in\n"
"Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format8bppIndexed);\n"
"// Obtaining the bitmap buffer\n"
"BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, width, height), "
"ImageLockMode.ReadWrite, PixelFormat.Format8bppIndexed);\n"
"try\n"
"    {\n"
"        int iCol = ct.GetCount();\n"
"        ColorPalette pal = bitmap.Palette;\n"
"        for (int i = 0; i < iCol; i++)\n"
"        {\n"
"            ColorEntry ce = ct.GetColorEntry(i);\n"
"            pal.Entries[i] = Color.FromArgb(ce.c4, ce.c1, ce.c2, ce.c3);\n"
"        }\n"
"        bitmap.Palette = pal;\n"
"\n"
"        int stride = bitmapData.Stride;\n"
"        IntPtr buf = bitmapData.Scan0;\n"
"\n"
"        band.ReadRaster(0, 0, width, height, buf, width, height, DataType."
"GDT_Byte, 1, stride);\n"
"        }\n"
"        finally\n"
"        {\n"
"            bitmap.UnlockBits(bitmapData);\n"
"        }\n"
"    }"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:192
msgid ""
"When reading grayscale images, the programmer should create a sufficient "
"palette for the .NET image."
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:194
msgid ""
"// Get the GDAL Band objects from the Dataset\n"
"Band band = ds.GetRasterBand(1);\n"
"// Create a Bitmap to store the GDAL image in\n"
"Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format8bppIndexed);\n"
"// Obtaining the bitmap buffer\n"
"BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, width, height), "
"ImageLockMode.ReadWrite, PixelFormat.Format8bppIndexed);\n"
"try\n"
"    {\n"
"        ColorPalette pal = bitmap.Palette;\n"
"        for(int i = 0; i < 256; i++)\n"
"            pal.Entries[i] = Color.FromArgb( 255, i, i, i );\n"
"        bitmap.Palette = pal;\n"
"\n"
"        int stride = bitmapData.Stride;\n"
"        IntPtr buf = bitmapData.Scan0;\n"
"\n"
"        band.ReadRaster(0, 0, width, height, buf, width, height, DataType."
"GDT_Byte, 1, stride);\n"
"    }\n"
"    finally\n"
"    {\n"
"        bitmap.UnlockBits(bitmapData);\n"
"    }"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:220
msgid "Related C# examples"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:222
msgid ""
"The following examples demonstrate the usage of the GDAL raster operations "
"mentioned previously:"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:224
msgid ":source_file:`swig/csharp/apps/GDALRead.cs`"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:225
#: ../../../source/api/csharp/csharp_raster.rst:226
msgid ":source_file:`swig/csharp/apps/GDALReadDirect.cs`"
msgstr ""

#: ../../../source/api/csharp/csharp_raster.rst:228
msgid ""
"This document was amended from the previous version at `https://trac.osgeo."
"org/gdal/wiki/GdalOgrCsharpRaster <https://trac.osgeo.org/gdal/wiki/"
"GdalOgrCsharpRaster>`__"
msgstr ""
