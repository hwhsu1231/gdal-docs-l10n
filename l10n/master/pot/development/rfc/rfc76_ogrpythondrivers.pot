# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-26 10:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:5
msgid "RFC 76: OGR Python drivers"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:8
msgid "Author:"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:8
msgid "Even Rouault"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:9
msgid "Contact:"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:9
msgid "even.rouault @ spatialys.com"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:10
msgid "Started:"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:10
msgid "2019-Nov-5"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:11
msgid "Last updated:"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:11
msgid "2019-Nov-15"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:12
msgid "Status:"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:12
msgid "Adopted, implemented in GDAL 3.1"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:16
msgid "Summary"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:18
msgid "This RFC adds the capability to write OGR/vector drivers in Python."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:21
msgid "Motivation"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:23
msgid ""
"For some use cases that do not require lighting speed, or to deal with very "
"niche formats (possibly in house format), it might be faster and more "
"efficient to write a vector driver in Python rather than a GDAL C++ driver "
"as currently required, or an ad-hoc converter."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:30
msgid ""
"QGIS has now a way to create Python-based providers such as in https://"
"github.com/qgis/QGIS/blob/master/tests/src/python/provider_python.py Having "
"a way to do in GDAL itself also allows the rest of GDAL/OGR based tools to "
"use the OGR Python driver."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:36
msgid "How does that work ?"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:39
msgid "Driver registration"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:41
msgid ""
"The driver registration mechanism is extended to look for .py scripts in a "
"dedicated directory:"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:44
msgid ""
"the directory pointed by the :config:`GDAL_PYTHON_DRIVER_PATH` configuration "
"option (there may be several paths separated by `:` on Unix or `;` on "
"Windows)"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:46
msgid ""
"if not defined, the directory pointed by the :config:`GDAL_DRIVER_PATH` "
"configuration option."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:48
msgid ""
"if not defined, in the directory (hardcoded at compilation time on Unix "
"builds) where native plugins are located."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:51
msgid ""
"Those Python script must set in their first lines at least 2 directives:"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:53
msgid "``# gdal: DRIVER_NAME = \"short_name\"``"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:54
msgid ""
"``# gdal: DRIVER_SUPPORTED_API_VERSION = 1`` . Currently only 1 supported. "
"If the interface changed in a backward incompatible way, we would increment "
"internally the supported API version number. This item enables us to check "
"if we are able to \"safely\" load a Python driver. If a Python driver would "
"support several API versions (not clear if that's really possible at that "
"point), it might use an array syntax to indicate that, like ``[1,2]``"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:60
msgid "``# gdal: DRIVER_DCAP_VECTOR = \"YES\"``"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:61
msgid "``# gdal: DRIVER_DMD_LONGNAME = \"my super plugin\"``"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:63
msgid ""
"Optional metadata such as ``# gdal: DRIVER_DMD_EXTENSIONS`` or ``# gdal: "
"DRIVER_DMD_HELPTOPIC`` can be defined (basically, any driver metadata key "
"string prefixed by ``# gdal: DRIVER_``"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:67
msgid ""
"These directives will be parsed in a pure textual way, without invocation of "
"the Python interpreter, both for efficiency consideration and also because "
"we want to delay the research or launch of the Python interpreter as much as "
"possible (the typical use case if GDAL used by QGIS: we want to make sure "
"that QGIS has itself started Python, to reuse that Python interpreter)"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:73
msgid ""
"From the short metadata, the driver registration code can instantiate "
"GDALDriver C++ objects. When the Identify() or Open() method is invoked on "
"that object, the C++ code will:"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:77
msgid ""
"if not already done, find Python symbols, or start Python (see below "
"paragraph for more details)"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:79
msgid "if not already done, load the .py file as a Python module"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:80
msgid ""
"if not already done, instantiate an instance of the Python class of the "
"module deriving from ``gdal_python_driver.BaseDriver``"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:82
msgid ""
"call the  ``identify`` and ``open`` method depending on the originated API "
"call."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:84
msgid ""
"The ``open`` method will return a Python ``BaseDataset`` object with "
"required and optional methods that will be invoked by the corresponding GDAL "
"API calls. And likewise for the ``BaseLayer`` object. See the example_."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:89
msgid "Connection with the Python interpreter"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:91
msgid ""
"The logic will be shared with the VRT pixel functions written in Python "
"functionality It relies on runtime linking to the Python symbols already "
"available in the process (for example the python executable or a binary "
"embedding Python and using GDAL, such as QGIS), or loading of the Python "
"library in case no Python symbols are found, rather than compile time "
"linking. The reason is that we do not know in advance with which Python "
"version GDAL can potentially be linked, and we do not want gdal.so/gdal.dll "
"to be explicitly linked with a particular Python library."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:100
msgid "This is both embedding and extending Python."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:102
msgid "The steps are:"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:104
msgid ""
"through dlopen() + dlsym() on Unix and EnumProcessModules()+GetProcAddress() "
"on Windows, look for Python symbols. If found, use it. This is for example "
"the case if GDAL is used from a Python module (GDAL Python bindings, "
"rasterio, etc.) or an application like QGIS that starts a Python interpreter."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:108
msgid ""
"otherwise, look for the PYTHONSO environment variable that should point to a "
"pythonX.Y[...].so/.dll"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:110
msgid ""
"otherwise, look for the python binary in the path and try to identify the "
"correspond Python .so/.dll"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:112
msgid ""
"otherwise, try to load with dlopen()/LoadLibrary() well-known names of "
"Python .so/.dll"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:116
msgid "Impacts on GDAL core"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:118
msgid ""
"They are minimal. The GDALAllRegister() method has an added call to "
"GDALDriverManager::AutoLoadPythonDrivers() that implements the above "
"mentioned logic. The GDALDriver class has been extended to support a new "
"function pointer, IdentifyEx(), which is used by the C++ shim that loads the "
"Python code."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:123
msgid "int                 (*pfnIdentifyEx)( GDALDriver*, GDALOpenInfo * );"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:127
msgid ""
"This extended IdentifyEx() function pointer, which adds the GDALDriver* "
"argument, is used in priority by GDALIdentify() and GDALOpen() methods. The "
"need for that is purely boring. For normal C++ drivers, there is no need to "
"pass the driver, as there is a one-to-one correspondence between a driver "
"and the function that implements the driver. But for the Python driver, "
"there is a single C++ method that does the interface with the Python "
"Identify() method of several Python drivers, hence the need of a GDALDriver* "
"argument to forward the call to the appropriate driver."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:139
msgid "Example of such a driver"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:141
msgid ""
"Note that the prefixing by the driver name in the connection string is "
"absolutely not a requirement, but something specific to this particular "
"driver which is a bit artificial. The CityJSON driver mentioned below does "
"not need it."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:145
msgid ""
"#!/usr/bin/env python\n"
"# -*- coding: utf-8 -*-\n"
"# This code is in the public domain, so as to serve as a template for\n"
"# real-world plugins.\n"
"# or, at the choice of the licensee,\n"
"# Copyright 2019 Even Rouault\n"
"# SPDX-License-Identifier: MIT\n"
"\n"
"# Metadata parsed by GDAL C++ code at driver pre-loading, starting with '# "
"gdal: '\n"
"# Required and with that exact syntax since it is parsed by non-Python\n"
"# aware code. So just literal values, no expressions, etc.\n"
"# gdal: DRIVER_NAME = \"DUMMY\"\n"
"# API version(s) supported. Must include 1 currently\n"
"# gdal: DRIVER_SUPPORTED_API_VERSION = [1]\n"
"# gdal: DRIVER_DCAP_VECTOR = \"YES\"\n"
"# gdal: DRIVER_DMD_LONGNAME = \"my super plugin\"\n"
"\n"
"# Optional driver metadata items.\n"
"# # gdal: DRIVER_DMD_EXTENSIONS = \"ext1 est2\"\n"
"# # gdal: DRIVER_DMD_HELPTOPIC = \"http://example.com/my_help.html\"\n"
"\n"
"# The gdal_python_driver module is defined by the GDAL library at runtime\n"
"from gdal_python_driver import BaseDriver, BaseDataset, BaseLayer\n"
"\n"
"class Layer(BaseLayer):\n"
"    def __init__(self):\n"
"\n"
"        # Reserved attribute names. Either those or the corresponding "
"method\n"
"        # must be defined\n"
"        self.name = 'my_layer'  # Required, or name() method\n"
"\n"
"        self.fid_name = 'my_fid'  # Optional\n"
"\n"
"        self.fields = [{'name': 'boolField', 'type': 'Boolean'},\n"
"                    {'name': 'int16Field', 'type': 'Integer16'},\n"
"                    {'name': 'int32Field', 'type': 'Integer'},\n"
"                    {'name': 'int64Field', 'type': 'Integer64'},\n"
"                    {'name': 'realField', 'type': 'Real'},\n"
"                    {'name': 'floatField', 'type': 'Float'},\n"
"                    {'name': 'strField', 'type': 'String'},\n"
"                    {'name': 'strNullField', 'type': 'String'},\n"
"                    {'name': 'strUnsetField', 'type': 'String'},\n"
"                    {'name': 'binaryField', 'type': 'Binary'},\n"
"                    {'name': 'timeField', 'type': 'Time'},\n"
"                    {'name': 'dateField', 'type': 'Date'},\n"
"                    {'name': 'datetimeField', 'type': 'DateTime'}]  # "
"Required, or fields() method\n"
"\n"
"        self.geometry_fields = [{'name': 'geomField',\n"
"                                'type': 'Point',  # optional\n"
"                                'srs': 'EPSG:4326'  # optional\n"
"                                }]  # Required, or geometry_fields() method\n"
"\n"
"        self.metadata = {'foo': 'bar'}  # optional\n"
"\n"
"        # uncomment if __iter__() honour self.attribute_filter\n"
"        #self.iterator_honour_attribute_filter = True\n"
"\n"
"        # uncomment if __iter__() honour self.spatial_filter\n"
"        #self.iterator_honour_spatial_filter = True\n"
"\n"
"        # uncomment if feature_count() honour self.attribute_filter\n"
"        #self.feature_count_honour_attribute_filter = True\n"
"\n"
"        # uncomment if feature_count() honour self.spatial_filter\n"
"        #self.feature_count_honour_spatial_filter = True\n"
"\n"
"        # End of reserved attribute names\n"
"\n"
"        self.count = 5\n"
"\n"
"    # Required, unless self.name attribute is defined\n"
"    # def name(self):\n"
"    #    return 'my_layer'\n"
"\n"
"    # Optional. If not defined, fid name is 'fid'\n"
"    # def fid_name(self):\n"
"    #    return 'my_fid'\n"
"\n"
"    # Required, unless self.geometry_fields attribute is defined\n"
"    # def geometry_fields(self):\n"
"    #    return [...]\n"
"\n"
"    # Required, unless self.required attribute is defined\n"
"    # def fields(self):\n"
"    #    return [...]\n"
"\n"
"    # Optional. Only to be usd if self.metadata field is not defined\n"
"    # def metadata(self, domain):\n"
"    #    if domain is None:\n"
"    #        return {'foo': 'bar'}\n"
"    #    return None\n"
"\n"
"    # Optional. Called when self.attribute_filter is changed by GDAL\n"
"    # def attribute_filter_changed(self):\n"
"    #     # You may change self.iterator_honour_attribute_filter\n"
"    #     # or feature_count_honour_attribute_filter\n"
"    #     pass\n"
"\n"
"    # Optional. Called when self.spatial_filter is changed by GDAL\n"
"    # def spatial_filter_changed(self):\n"
"    #     # You may change self.iterator_honour_spatial_filter\n"
"    #     # or feature_count_honour_spatial_filter\n"
"    #     pass\n"
"\n"
"    # Optional\n"
"    def test_capability(self, cap):\n"
"        if cap == BaseLayer.FastGetExtent:\n"
"            return True\n"
"        if cap == BaseLayer.StringsAsUTF8:\n"
"            return True\n"
"        # if cap == BaseLayer.FastSpatialFilter:\n"
"        #    return False\n"
"        # if cap == BaseLayer.RandomRead:\n"
"        #    return False\n"
"        if cap == BaseLayer.FastFeatureCount:\n"
"            return self.attribute_filter is None and self.spatial_filter is "
"None\n"
"        return False\n"
"\n"
"    # Optional\n"
"    def extent(self, force_computation):\n"
"        return [2.1, 49, 3, 50]  # minx, miny, maxx, maxy\n"
"\n"
"    # Optional.\n"
"    def feature_count(self, force_computation):\n"
"        # As we did not declare feature_count_honour_attribute_filter and\n"
"        # feature_count_honour_spatial_filter, the below case cannot happen\n"
"        # But this is to illustrate that you can callback the default "
"implementation\n"
"        # if needed\n"
"        # if self.attribute_filter is not None or \\\n"
"        #   self.spatial_filter is not None:\n"
"        #    return super(Layer, self).feature_count(force_computation)\n"
"\n"
"        return self.count\n"
"\n"
"    # Required. You do not need to handle the case of simultaneous iterators "
"on\n"
"    # the same Layer object.\n"
"    def __iter__(self):\n"
"        for i in range(self.count):\n"
"            properties = {\n"
"                'boolField': True,\n"
"                'int16Field': 32767,\n"
"                'int32Field': i + 2,\n"
"                'int64Field': 1234567890123,\n"
"                'realField': 1.23,\n"
"                'floatField': 1.2,\n"
"                'strField': 'foo',\n"
"                'strNullField': None,\n"
"                'binaryField': b'\\x01\\x00\\x02',\n"
"                'timeField': '12:34:56.789',\n"
"                'dateField': '2017-04-26',\n"
"                'datetimeField': '2017-04-26T12:34:56.789Z'}\n"
"\n"
"            yield {\"type\": \"OGRFeature\",\n"
"                \"id\": i + 1,\n"
"                \"fields\": properties,\n"
"                \"geometry_fields\": {\"geomField\": \"POINT(2 49)\"},\n"
"                \"style\": \"SYMBOL(a:0)\" if i % 2 == 0 else None,\n"
"                }\n"
"\n"
"    # Optional\n"
"    # def feature_by_id(self, fid):\n"
"    #    return {}\n"
"\n"
"\n"
"class Dataset(BaseDataset):\n"
"\n"
"    # Optional, but implementations will generally need it\n"
"    def __init__(self, filename):\n"
"        # If the layers member is set, layer_count() and layer() will not be "
"used\n"
"        self.layers = [Layer()]\n"
"        self.metadata = {'foo': 'bar'}\n"
"\n"
"    # Optional, called on native object destruction\n"
"    def __del__(self):\n"
"        pass\n"
"\n"
"    # Optional. Only to be usd if self.metadata field is not defined\n"
"    # def metadata(self, domain):\n"
"    #    if domain is None:\n"
"    #        return {'foo': 'bar'}\n"
"    #    return None\n"
"\n"
"    # Required, unless a layers attribute is set in __init__\n"
"    # def layer_count(self):\n"
"    #    return len(self.layers)\n"
"\n"
"    # Required, unless a layers attribute is set in __init__\n"
"    # def layer(self, idx):\n"
"    #    return self.layers[idx]\n"
"\n"
"\n"
"# Required: class deriving from BaseDriver\n"
"class Driver(BaseDriver):\n"
"\n"
"    # Optional. Called the first time the driver is loaded\n"
"    def __init__(self):\n"
"        pass\n"
"\n"
"    # Required\n"
"    def identify(self, filename, first_bytes, open_flags, open_options={}):\n"
"        return filename == 'DUMMY:'\n"
"\n"
"    # Required\n"
"    def open(self, filename, first_bytes, open_flags, open_options={}):\n"
"        if not self.identify(filename, first_bytes, open_flags):\n"
"            return None\n"
"        return Dataset(filename)"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:356
msgid "Other examples:"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:358
msgid ""
"a PASSTHROUGH driver that forwards calls to the GDAL SWIG Python API: "
"https://github.com/OSGeo/gdal/blob/master/examples/pydrivers/ogr_PASSTHROUGH."
"py"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:360
msgid ""
"a driver implemented a simple parsing of `CityJSON <https://www.cityjson.org/"
">`_: https://github.com/OSGeo/gdal/blob/master/examples/pydrivers/"
"ogr_CityJSON.py"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:364
msgid "Limitations and scope"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:366
msgid "Vector and read-only for now. This could later be extended of course."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:368
msgid ""
"No connection between the Python code of the plugin and the OGR Python API "
"that is built on top of SWIG. This does not appear to be doable in a "
"reasonable way. Nothing prevents people from using the GDAL/OGR/OSR Python "
"API but the objects exchanged between the OGR core and the Python code will "
"not be OGR Python SWIG objects. A typical example is that a plugin will "
"return its CRS as a string (WKT, PROJSON, or deprecated PROJ.4 string), but "
"not as a osgeo.osr.SpatialReference object. But it is possible to use the "
"osgeo.osr.SpatialReference API to generate this WKT string."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:378
msgid ""
"This RFC does not try to cover the management of Python dependencies. It is "
"up to the user to do the needed \"pip install\" or whatever Python package "
"management solution it uses."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:382
msgid ""
"The Python \"Global Interpreter Lock\" is held in the Python drivers, as "
"required for safe use of Python. Consequently scaling of such drivers is "
"limited."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:385
msgid ""
"Given the above restrictions, this will remain an \"experimental\" feature "
"and the GDAL project will not accept such Python drivers to be included in "
"the GDAL repository. This is similar to the situation of the QGIS project "
"that allows Python plugins outside of the main QGIS repository. If a QGIS "
"plugin want to be moved into the main repository, it has to be converted to "
"C++. The rationale for this is that the correctness of the Python code can "
"mostly be checked at runtime, whereas C++ benefits from static analysis (at "
"compile time, and other checkers). In the context of GDAL, this rationale "
"also applies. GDAL drivers are also stress-tested by the OSS Fuzz "
"infrastructure, and that requires them to be written in C++."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:396
msgid ""
"The interface between the C++ and Python code might break between GDAL "
"feature releases. In that case we will increment the expected API version "
"number to avoid loading incompatible Python drivers. We will likely not make "
"any effort to be able to deal with plugins of incompatible (previous) API "
"version."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:403
msgid "SWIG binding changes"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:405
msgid "None"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:408
msgid "Security implications"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:410
msgid ""
"Similar to the existing native code plugin mechanism of GDAL. If the user "
"defines the GDAL_PYTHON_DRIVER_PATH environment variable or "
"GDAL_DRIVER_PATH, annd put .py scripts in them (or in {prefix}/lib/"
"gdalplugins/python as a fallback), they will be executed."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:415
msgid ""
"However, opening a .py file with GDALOpen() or similar mechanisms will not "
"lead to its execution, so this is safe for normal GDAL usage."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:418
msgid ""
"The GDAL_NO_AUTOLOAD compile time #define, already used to disable loading "
"of native plugins, is also honoured to disable the loading of Python plugins."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:422
msgid "Performance impact"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:424
msgid ""
"If no .py script exists in the researched location, the performance impact "
"on GDALAllRegister() should be within the noise."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:428
msgid "Backward compatibility"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:430
msgid "No backward incompatibility. Only functionality addition."
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:433
msgid "Documentation"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:435
msgid ""
"A tutorial will be added to explain how to write such a Python driver: "
"https://github.com/rouault/gdal/blob/pythondrivers/gdal/doc/source/tutorials/"
"vector_python_driver.rst"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:439
msgid "Testing"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:441
msgid ""
"The gdalautotest suite will be extended with the above test Python driver, "
"and a few error cases: https://github.com/rouault/gdal/blob/pythondrivers/"
"autotest/ogr/ogr_pythondrivers.py"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:446
msgid "Previous discussions"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:448
msgid "This topic has been discussed in the past in :"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:450
msgid "https://lists.osgeo.org/pipermail/gdal-dev/2017-April/thread.html#46526"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:451
msgid ""
"https://lists.osgeo.org/pipermail/gdal-dev/2018-November/thread.html#49294"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:454
msgid "Implementation"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:456
msgid ""
"A candidate implementation is available at in https://github.com/rouault/"
"gdal/tree/pythondrivers"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:459
msgid "https://github.com/OSGeo/gdal/compare/master...rouault:pythondrivers"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:462
msgid "Voting history"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:464
msgid "+1 from EvenR, JukkaR, MateuzL, DanielM"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:465
msgid "-0 from SeanG"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:466
msgid "+0 from HowardB"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:469
msgid "Credits"
msgstr ""

#: ../../../source/development/rfc/rfc76_ogrpythondrivers.rst:471
msgid "Sponsored by OpenGeoGroep"
msgstr ""
