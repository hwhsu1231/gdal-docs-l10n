# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-22 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:5
msgid "RFC 35: Delete, reorder and alter field definitions of OGR layers"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:7
msgid "Authors: Even Rouault"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:9
msgid "Contact: even dot rouault at spatialys.com"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:11
msgid "Status: Adopted"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:14
msgid "Summary"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:16
msgid ""
"This document proposes changes in OGR to add the capability to delete "
"fields, reorder fields and alter field definitions, in OGR layer definitions."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:21
msgid "Rationale"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:23
msgid ""
"Currently, an OGR layer definition can only be altered to add a new field "
"definition with OGRLayer::CreateField()."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:26
msgid ""
"It is desirable to extend OGR capabilities to be able to delete, reorder and "
"alter field definitions of existing layers. Such wish has been expressed in "
"ticket #2671 and comes back regularly on QGIS mailing list (e.g. `http://"
"lists.osgeo.org/pipermail/qgis-user/2011-May/011935.html <http://lists.osgeo."
"org/pipermail/qgis-user/2011-May/011935.html>`__). QGIS currently has a "
"\"Table Manager\" extension to work around the lack of DeleteField(), so a "
"proper solution is clearly needed."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:35
msgid "Planned Changes"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:37
msgid "The OGRLayer class will be extended with the following methods :"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:41
msgid ""
"virtual OGRErr      DeleteField( int iField );\n"
"virtual OGRErr      ReorderFields( int* panMap );\n"
"virtual OGRErr      AlterFieldDefn( int iField, OGRFieldDefn* "
"poNewFieldDefn, int nFlags );\n"
"\n"
"/* non virtual : conveniency wrapper for ReorderFields() */\n"
"OGRErr              ReorderField( int iOldFieldPos, int iNewFieldPos );"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:48
msgid "The documentation of those new methods is :"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:53
msgid ""
"/**\n"
"\\fn OGRErr OGRLayer::DeleteField( int iField );\n"
"\n"
"\\brief Delete an existing field on a layer.\n"
"\n"
"You must use this to delete existing fields\n"
"on a real layer. Internally the OGRFeatureDefn for the layer will be "
"updated\n"
"to reflect the deleted field.  Applications should never modify the "
"OGRFeatureDefn\n"
"used by a layer directly.\n"
"\n"
"This method should not be called while there are feature objects in "
"existence that\n"
"were obtained or created with the previous layer definition.\n"
"\n"
"Not all drivers support this method. You can query a layer to check if it "
"supports it\n"
"with the OLCDeleteField capability. Some drivers may only support this "
"method while\n"
"there are still no features in the layer. When it is supported, the "
"existings features of the\n"
"backing file/database should be updated accordingly.\n"
"\n"
"This function is the same as the C function OGR_L_DeleteField().\n"
"\n"
"@param iField index of the field to delete.\n"
"\n"
"@return OGRERR_NONE on success.\n"
"\n"
"@since OGR 1.9.0\n"
"*/\n"
"\n"
"/**\n"
"\\fn OGRErr OGRLayer::ReorderFields( int* panMap );\n"
"\n"
"\\brief Reorder all the fields of a layer.\n"
"\n"
"You must use this to reorder existing fields\n"
"on a real layer. Internally the OGRFeatureDefn for the layer will be "
"updated\n"
"to reflect the reordering of the fields.  Applications should never modify "
"the OGRFeatureDefn\n"
"used by a layer directly.\n"
"\n"
"This method should not be called while there are feature objects in "
"existence that\n"
"were obtained or created with the previous layer definition.\n"
"\n"
"panMap is such that,for each field definition at position i after "
"reordering,\n"
"its position before reordering was panMap[i].\n"
"\n"
"For example, let suppose the fields were \"0\",\"1\",\"2\",\"3\",\"4\" "
"initially.\n"
"ReorderFields([0,2,3,1,4]) will reorder them as \"0\",\"2\",\"3\",\"1\","
"\"4\".\n"
"\n"
"Not all drivers support this method. You can query a layer to check if it "
"supports it\n"
"with the OLCReorderFields capability. Some drivers may only support this "
"method while\n"
"there are still no features in the layer. When it is supported, the "
"existings features of the\n"
"backing file/database should be updated accordingly.\n"
"\n"
"This function is the same as the C function OGR_L_ReorderFields().\n"
"\n"
"@param panMap an array of GetLayerDefn()->GetFieldCount() elements which\n"
"is a permutation of [0, GetLayerDefn()->GetFieldCount()-1].\n"
"\n"
"@return OGRERR_NONE on success.\n"
"\n"
"@since OGR 1.9.0\n"
"*/\n"
"\n"
"/**\n"
"\\fn OGRErr OGRLayer::ReorderField( int iOldFieldPos, int iNewFieldPos );\n"
"\n"
"\\brief Reorder an existing field on a layer.\n"
"\n"
"This method is a conveniency wrapper of ReorderFields() dedicated to move a "
"single field.\n"
"It is a non-virtual method, so drivers should implement ReorderFields() "
"instead.\n"
"\n"
"You must use this to reorder existing fields\n"
"on a real layer. Internally the OGRFeatureDefn for the layer will be "
"updated\n"
"to reflect the reordering of the fields.  Applications should never modify "
"the OGRFeatureDefn\n"
"used by a layer directly.\n"
"\n"
"This method should not be called while there are feature objects in "
"existence that\n"
"were obtained or created with the previous layer definition.\n"
"\n"
"The field definition that was at initial position iOldFieldPos will be moved "
"at\n"
"position iNewFieldPos, and elements between will be shuffled accordingly.\n"
"\n"
"For example, let suppose the fields were \"0\",\"1\",\"2\",\"3\",\"4\" "
"initially.\n"
"ReorderField(1, 3) will reorder them as \"0\",\"2\",\"3\",\"1\",\"4\".\n"
"\n"
"Not all drivers support this method. You can query a layer to check if it "
"supports it\n"
"with the OLCReorderFields capability. Some drivers may only support this "
"method while\n"
"there are still no features in the layer. When it is supported, the "
"existings features of the\n"
"backing file/database should be updated accordingly.\n"
"\n"
"This function is the same as the C function OGR_L_ReorderField().\n"
"\n"
"@param iOldFieldPos previous position of the field to move. Must be in the "
"range [0,GetFieldCount()-1].\n"
"@param iNewFieldPos new position of the field to move. Must be in the range "
"[0,GetFieldCount()-1].\n"
"\n"
"@return OGRERR_NONE on success.\n"
"\n"
"@since OGR 1.9.0\n"
"*/\n"
"\n"
"/**\n"
"\\fn OGRErr OGRLayer::AlterFieldDefn( int iField, OGRFieldDefn* "
"poNewFieldDefn, int nFlags );\n"
"\n"
"\\brief Alter the definition of an existing field on a layer.\n"
"\n"
"You must use this to alter the definition of an existing field of a real "
"layer.\n"
"Internally the OGRFeatureDefn for the layer will be updated\n"
"to reflect the altered field.  Applications should never modify the "
"OGRFeatureDefn\n"
"used by a layer directly.\n"
"\n"
"This method should not be called while there are feature objects in "
"existence that\n"
"were obtained or created with the previous layer definition.\n"
"\n"
"Not all drivers support this method. You can query a layer to check if it "
"supports it\n"
"with the OLCAlterFieldDefn capability. Some drivers may only support this "
"method while\n"
"there are still no features in the layer. When it is supported, the "
"existings features of the\n"
"backing file/database should be updated accordingly. Some drivers might also "
"not support\n"
"all update flags.\n"
"\n"
"This function is the same as the C function OGR_L_AlterFieldDefn().\n"
"\n"
"@param iField index of the field whose definition must be altered.\n"
"@param poNewFieldDefn new field definition\n"
"@param nFlags combination of ALTER_NAME_FLAG, ALTER_TYPE_FLAG and "
"ALTER_WIDTH_PRECISION_FLAG\n"
"to indicate which of the name and/or type and/or width and precision fields "
"from the new field\n"
"definition must be taken into account.\n"
"\n"
"@return OGRERR_NONE on success.\n"
"\n"
"@since OGR 1.9.0\n"
"*/"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:183
msgid "Three new layer capabilities are added :"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:187
msgid ""
"OLCDeleteField / \"DeleteField\": TRUE if this layer can delete\n"
"existing fields on the current layer using DeleteField(), otherwise FALSE.\n"
"\n"
"OLCReorderFields / \"ReorderFields\": TRUE if this layer can reorder\n"
"existing fields on the current layer using ReorderField() or "
"ReorderFields(), otherwise FALSE.\n"
"\n"
"OLCAlterFieldDefn / \"AlterFieldDefn\": TRUE if this layer can alter\n"
"the definition of an existing field on the current layer using "
"AlterFieldDefn(), otherwise FALSE."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:196
msgid "The new methods are mapped to the C API :"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:200
msgid ""
"OGRErr CPL_DLL OGR_L_DeleteField( OGRLayerH, int iField );\n"
"OGRErr CPL_DLL OGR_L_ReorderFields( OGRLayerH, int* panMap );\n"
"OGRErr CPL_DLL OGR_L_ReorderField( OGRLayerH, int iOldFieldPos, int "
"iNewFieldPos );\n"
"OGRErr CPL_DLL OGR_L_AlterFieldDefn( OGRLayerH, int iField, OGRFieldDefnH "
"hNewFieldDefn, int nFlags );"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:205
msgid ""
"For the purpose of the implementation, new methods are also added to the "
"OGRFeatureDefn class :"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:210
msgid ""
"OGRErr      DeleteFieldDefn( int iField );\n"
"OGRErr      ReorderFieldDefns( int* panMap );"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:213
msgid ""
"A OGRErr OGRCheckPermutation(int\\* panPermutation, int nSize) function is "
"added to ogrutils.cpp to check that the array is a permutation of [0,"
"nSize-1]. It is used by OGRFeatureDefn::ReorderFieldDefns() and can be used "
"by all drivers implementing OGRLayer::ReorderFields() to validate the panMap "
"argument."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:220
msgid "Altering field types"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:222
msgid ""
"This RFC does not attempt to guarantee which type conversions will be "
"possible. It will depend on the capabilities of the implementing drivers. "
"For example, for database drivers, the operation will be directly done on "
"the server side (through a 'ALTER TABLE my_table ALTER COLUMN my_column TYPE "
"new_type' command for the PG driver). So some conversions might be possible, "
"others not..."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:229
msgid ""
"It is however expected that converting from any type to OFTString will be "
"supported in most cases when AlterFieldDefn() is supported."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:232
msgid ""
"Drivers that don't support a conversion and that were required to do it "
"(ALTER_TYPE_FLAG set and new_type != old_type) should emit an explicit error."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:237
msgid "Compatibility Issues"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:239
msgid "None"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:242
msgid "Changed drivers"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:244
msgid ""
"The shapefile driver will implement DeleteField(), ReorderFields() and "
"AlterFieldDefn(). Shapelib will be extended with DBFReorderFields() and "
"DBFAlterFieldDefn()."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:248
msgid ""
"Note: The implementation of AlterFieldDefn() in the Shapefile driver does "
"not support altering the field type, except when converting to OFTString. It "
"will not reformat numeric values of existing features if width or precision "
"are changed. However, appropriate field truncation or expansion will occur "
"if the width is altered."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:254
msgid ""
"Other drivers, mainly database drivers (PG, MySQL, SQLite), could be easily "
"extended to implement the new API by issuing the appropriate SQL command "
"(ALTER TABLE foo DROP COLUMN bar, ALTER TABLE foo ALTER COLUMN bar, ...). "
"The implementation of DeleteField() and AlterFieldDefn() in the PG driver is "
"indeed planned, provided this RFC is adopted. The Memory driver will also "
"updated to support DeleteField(), ReorderFields() and AlterFieldDefn()."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:263
msgid "SWIG bindings"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:265
msgid ""
"DeleteField(), ReorderField(), ReorderFields() and AlterFieldDefn() will be "
"mapped to SWIG."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:269
msgid "Test Suite"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:271
msgid ""
"The autotest suite will be extended to test the implementation of the new "
"API for the Shapefile driver. An example of the use of the new API is "
"attached to ticket #2671 (`rfc35_test.py <http://trac.osgeo.org/gdal/"
"attachment/ticket/2671/rfc35_test.py>`__) and will be turned into unit tests."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:278
msgid "Implementation"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:280
msgid ""
"Implementation will be done by Even Rouault in GDAL/OGR trunk. Changes in "
"Shapelib will need to be pushed into upstream CVS by a Shapelib committer. "
"The proposed implementation is attached as a patch in ticket #2671 "
"(`rfc35_v3.patch <http://trac.osgeo.org/gdal/attachment/ticket/2671/rfc35_v3."
"patch>`__)."
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:287
msgid "Voting history"
msgstr ""

#: ../../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:289
msgid "+1 from FrankW, DanielM, HowardB, TamasS and EvenR"
msgstr ""
