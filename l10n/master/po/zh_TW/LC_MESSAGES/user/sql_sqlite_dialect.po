# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-22 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/user/sql_sqlite_dialect.rst:5
msgid "SQL SQLite dialect"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:9
msgid ""
"The ``SQLite`` dialect can be used as an alternate SQL dialect to the :ref:"
"`ogr_sql_dialect`. This assumes that GDAL/OGR is built with support for "
"SQLite, and preferably with `Spatialite <https://www.gaia-gis.it/fossil/"
"libspatialite/index>`_ support too to benefit from spatial functions."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:14
msgid ""
"The SQLite dialect may be used with any OGR datasource, like the OGR SQL "
"dialect. The ``SQLite`` dialect can be requested with the ``SQLite`` string "
"passed as the dialect parameter of :cpp:func:`GDALDataset::ExecuteSQL`, or "
"with the `-dialect` option of the :ref:`ogrinfo` or :ref:`ogr2ogr` utilities."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:19
msgid ""
"This is mainly aimed to execute SELECT statements, but, for datasources that "
"support update, INSERT/UPDATE/DELETE statements can also be run. GDAL is "
"internally using `the Virtual Table Mechanism of SQLite <https://sqlite.org/"
"vtab.html>`_ and therefore operations like ALTER TABLE are not supported. "
"For executing ALTER TABLE or DROP TABLE use :ref:`ogr_sql_dialect`"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:25
msgid ""
"If the datasource is SQLite database (GeoPackage, SpatiaLite) then SQLite "
"dialect acts as native SQL dialect and Virtual Table Mechanism is not used. "
"It is possible to force GDAL to use Virtual Tables even in this case by "
"specifying \"-dialect INDIRECT_SQLITE\". This should be used only when "
"necessary, since going through the virtual table mechanism might affect "
"performance."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:31
msgid ""
"The syntax of the SQL statements is fully the one of the SQLite SQL engine. "
"You can refer to the following pages:"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:34
msgid "`SELECT <http://www.sqlite.org/lang_select.html>`_"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:35
msgid "`INSERT <http://www.sqlite.org/lang_insert.html>`_"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:36
msgid "`UPDATE <http://www.sqlite.org/lang_update.html>`_"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:37
msgid "`DELETE <http://www.sqlite.org/lang_delete.html>`_"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:40
msgid "SELECT statement"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:42
msgid ""
"The SELECT statement is used to fetch layer features (analogous to table "
"rows in an RDBMS) with the result of the query represented as a temporary "
"layer of features. The layers of the datasource are analogous to tables in "
"an RDBMS and feature attributes are analogous to column values. The simplest "
"form of OGR SQLITE SELECT statement looks like this:"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:48
msgid "SELECT * FROM polylayer"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:52
msgid ""
"More complex statements can of course be used, including WHERE, JOIN, USING, "
"GROUP BY, ORDER BY, sub SELECT, ..."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:55
msgid ""
"The table names that can be used are the layer names available in the "
"datasource on which the ExecuteSQL() method is called."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:58
msgid ""
"Similarly to OGRSQL, it is also possible to refer to layers of other "
"datasources with the following syntax : \"other_datasource_name\"."
"\"layer_name\"."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:61
msgid ""
"SELECT p.*, NAME FROM poly p JOIN \"idlink.dbf\".\"idlink\" il USING (eas_id)"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:65
msgid ""
"If the master datasource is SQLite database (GeoPackage, SpatiaLite) it is "
"necessary to use indirect SQLite dialect. Otherwise additional datasources "
"are never opened but tables to be used in joins are searched from the master "
"database."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:69
msgid ""
"ogrinfo jointest.gpkg -dialect INDIRECT_SQLITE -sql \"SELECT a.ID,b.ID FROM "
"jointest a JOIN \\\"jointest2.shp\\\".\\\"jointest2\\\" b ON a.ID=b.ID\""
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:73
msgid ""
"The column names that can be used in the result column list, in WHERE, "
"JOIN, ... clauses are the field names of the layers. Expressions, SQLite "
"functions, spatial functions, etc... can also be used."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:78
msgid ""
"The conditions on fields expressed in WHERE clauses, or in JOINs are "
"translated, as far as possible, as attribute filters that are applied on the "
"underlying OGR layers. Joins can be very expensive operations if the "
"secondary table is not indexed on the key field being used."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:84
msgid "LIKE operator"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:86
msgid ""
"In SQLite, the LIKE operator is case insensitive, unless ``PRAGMA "
"case_sensitive_like = 1`` has been issued."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:89
msgid ""
"Starting with GDAL 3.9, GDAL installs a custom LIKE comparison, such that "
"UTF-8 characters are taken into account by ``LIKE`` and ``ILIKE`` operators. "
"For ILIKE case insensitive comparisons, this is restricted to the `ASCII "
"<https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)>`__, `Latin-1 "
"Supplement <https://en.wikipedia.org/wiki/"
"Latin-1_Supplement_(Unicode_block)>`__, `Latin Extended-A <https://en."
"wikipedia.org/wiki/Latin_Extended-A>`__, `Latin Extended-B <https://en."
"wikipedia.org/wiki/Latin_Extended-B>`__, `Greek and Coptic <https://en."
"wikipedia.org/wiki/Greek_and_Coptic>`__ and `Cyrillic <https://en.wikipedia."
"org/wiki/Greek_and_Coptic>`__ Unicode categories."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:100
msgid "Delimited identifiers"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:102
msgid ""
"If names of layers or attributes are reserved keywords in SQL like 'FROM' or "
"they begin with a number or underscore they must be handled as \"delimited "
"identifiers\" and enclosed between double quotation marks in queries. Double "
"quotes can be used even when they are not strictly needed."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:107
msgid "SELECT \"p\".\"geometry\", \"p\".\"FROM\", \"p\".\"3D\" FROM \"poly\" p"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:111
msgid ""
"When SQL statements are used in the command shell and the statement itself "
"is put between double quotes, the internal double quotes must be escaped "
"with \\\\"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:114
msgid "ogrinfo p.shp -sql \"SELECT geometry \\\"FROM\\\", \\\"3D\\\" FROM p\""
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:119
msgid "Geometry field"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:121
msgid ""
"The ``GEOMETRY`` special field represents the geometry of the feature "
"returned by OGRFeature::GetGeometryRef(). It can be explicitly specified in "
"the result column list of a SELECT, and is automatically selected if the * "
"wildcard is used."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:126
msgid ""
"For OGR layers that have a non-empty geometry column name (generally for "
"RDBMS datasources), as returned by OGRLayer::GetGeometryColumn(), the name "
"of the geometry special field in the SQL statement will be the name of the "
"geometry column of the underlying OGR layer. If the name of the geometry "
"column in the source layer is empty, like with shapefiles etc., the name to "
"use in the SQL statement is always \"geometry\"."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:132
msgid "SELECT EAS_ID, GEOMETRY FROM poly"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:136
#: ../../../source/user/sql_sqlite_dialect.rst:148
#: ../../../source/user/sql_sqlite_dialect.rst:214
#: ../../../source/user/sql_sqlite_dialect.rst:341
#: ../../../source/user/sql_sqlite_dialect.rst:352
msgid "returns:"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:140
msgid ""
"OGRFeature(SELECT):0\n"
"EAS_ID (Real) = 168\n"
"POLYGON ((479819.84375 4765180.5,479690.1875 4765259.5,[...],479819.84375 "
"4765180.5))"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:144
msgid "SELECT * FROM poly"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:152
msgid ""
"OGRFeature(SELECT):0\n"
"AREA (Real) = 215229.266\n"
"EAS_ID (Real) = 168\n"
"PRFEDEA (String) = 35043411\n"
"POLYGON ((479819.84375 4765180.5,479690.1875 4765259.5,[...],479819.84375 "
"4765180.5))"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:159
msgid "Feature id (FID)"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:161
msgid ""
"The feature id is a special property of a feature and not treated as an "
"attribute of the feature.  In some cases it is convenient to be able to "
"utilize the feature id in queries and result sets as a regular field.  To do "
"so use the name ``rowid``."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:166
msgid ""
"Starting with GDAL 3.8, if the layer has a named FID column (:cpp:func:"
"`OGRLayer::GetFIDColumn` != \"\"), this name may also be used."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:169
#: ../../../source/user/sql_sqlite_dialect.rst:177
msgid ""
"The field wildcard expansions will not include the feature id, but it may be "
"explicitly included using a syntax like:"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:172
msgid "SELECT ROWID, * FROM nation"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:180
msgid "SELECT rowid, * FROM nation"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:184
msgid "It is of course possible to rename it:"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:186
msgid "SELECT rowid AS fid, * FROM nation"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:191
msgid "OGR_STYLE special field"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:193
msgid ""
"The ``OGR_STYLE`` special field represents the style string of the feature "
"returned by OGRFeature::GetStyleString(). By using this field and the "
"``LIKE`` operator the result of the query can be filtered by the style. For "
"example we can select the annotation features as:"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:198
msgid "SELECT * FROM nation WHERE OGR_STYLE LIKE 'LABEL%'"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:203
msgid "Spatialite SQL functions"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:205
msgid ""
"When GDAL/OGR is build with support for the `Spatialite <https://www.gaia-"
"gis.it/fossil/libspatialite/index>`_ library, a lot of `extra SQL functions "
"<http://www.gaia-gis.it/gaia-sins/spatialite-sql-latest.html>`_, in "
"particular spatial functions, can be used in results column fields, WHERE "
"clauses, etc...."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:209
msgid ""
"SELECT EAS_ID, ST_Area(GEOMETRY) AS area FROM poly WHERE\n"
"    ST_Intersects(GEOMETRY, BuildCircleMbr(479750.6875,4764702.0,100))"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:218
msgid ""
"OGRFeature(SELECT):0\n"
"EAS_ID (Real) = 169\n"
"area (Real) = 101429.9765625\n"
"\n"
"OGRFeature(SELECT):1\n"
"EAS_ID (Real) = 165\n"
"area (Real) = 596610.3359375\n"
"\n"
"OGRFeature(SELECT):2\n"
"EAS_ID (Real) = 170\n"
"area (Real) = 5268.8125"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:230
msgid ""
"Note that due to the loose typing mechanism of SQLite, if a geometry "
"expression returns a NULL value for the first row, this will generally cause "
"OGR not to recognize the column as a geometry column. It might be then "
"useful to sort the results by making sure that non-null geometries are "
"returned first:"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:237
msgid ""
"ogrinfo test.shp -sql \"SELECT * FROM (SELECT ST_Buffer(geometry,5) AS "
"geometry FROM test) ORDER BY geometry IS NULL ASC\" -dialect sqlite"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:240
msgid "OGR datasource SQL functions"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:242
msgid ""
"The ``ogr_datasource_load_layers(datasource_name[, update_mode[, prefix]])`` "
"function can be used to automatically load all the layers of a datasource "
"as :ref:`VirtualOGR tables <vector.sqlite>`."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:248
msgid ""
"sqlite> SELECT load_extension('libgdal.so');\n"
"\n"
"sqlite> SELECT load_extension('mod_spatialite');\n"
"\n"
"sqlite> SELECT ogr_datasource_load_layers('poly.shp');\n"
"1\n"
"sqlite> SELECT * FROM sqlite_master;\n"
"table|poly|poly|0|CREATE VIRTUAL TABLE \"poly\" USING VirtualOGR('poly.shp', "
"0, 'poly')"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:258
msgid "OGR layer SQL functions"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:260
msgid ""
"The following SQL functions are available and operate on a layer name : "
"``ogr_layer_Extent()``, ``ogr_layer_SRID()``, ``ogr_layer_GeometryType()`` "
"and ``ogr_layer_FeatureCount()``"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:264
msgid ""
"SELECT ogr_layer_Extent('poly'), ogr_layer_SRID('poly') AS srid,\n"
"    ogr_layer_GeometryType('poly') AS geomtype, "
"ogr_layer_FeatureCount('poly') AS count"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:271
msgid ""
"OGRFeature(SELECT):0\n"
"srid (Integer) = 40004\n"
"geomtype (String) = POLYGON\n"
"count (Integer) = 10\n"
"POLYGON ((478315.53125 4762880.5,481645.3125 4762880.5,481645.3125 "
"4765610.5,478315.53125 4765610.5,478315.53125 4762880.5))"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:278
msgid "OGR compression functions"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:280
msgid ""
"``ogr_deflate(text_or_blob[, compression_level])`` returns a binary blob "
"compressed with the ZLib deflate algorithm. See :cpp:func:`CPLZLibDeflate`"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:283
msgid ""
"``ogr_inflate(compressed_blob)`` returns the decompressed binary blob, from "
"a blob compressed with the ZLib deflate algorithm. If the decompressed "
"binary is a string, use CAST(ogr_inflate(compressed_blob) AS VARCHAR). See "
"CPLZLibInflate()."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:289
msgid "Other functions"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:291
msgid ""
"The ``hstore_get_value()`` function can be used to extract a value associate "
"to a key from a HSTORE string, formatted like \"key=>value,"
"other_key=>other_value,...\""
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:294
msgid ""
"SELECT hstore_get_value('a => b, \"key with space\"=> \"value with space\"', "
"'key with space') --> 'value with space'"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:301
msgid "Raster related functions"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:303
msgid ""
"The ``gdal_get_pixel_value()`` function (added in GDAL 3.7) can be used to "
"extract the value of a pixel in a GDAL dataset. It requires the "
"configuration option OGR_SQLITE_ALLOW_EXTERNAL_ACCESS to be set to YES (for "
"security reasons)."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:307
msgid "It takes 5 arguments:"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:309
msgid "a string with the dataset name"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:310
msgid "a band number (numbering starting at 1)"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:311
msgid ""
"a string being \"georef\" to indicate that subsequent values will be "
"georeferenced coordinates, or \"pixel\" to indicate that subsequent values "
"will be in column, line pixel space"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:314
msgid "georeferenced X value or column number"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:315
msgid "georeferenced Y value or line number"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:317
msgid ""
"SELECT gdal_get_pixel_value('../gcore/data/byte.tif', 1, 'georef', 440720, "
"3751320)\n"
"SELECT gdal_get_pixel_value('../gcore/data/byte.tif', 1, 'pixel', 0, 0)"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:324
msgid "OGR geocoding functions"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:326
msgid ""
"The following SQL functions are available : ``ogr_geocode(...)`` and "
"``ogr_geocode_reverse(...)``."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:328
msgid ""
"``ogr_geocode(name_to_geocode [, field_to_return [, option1 [, "
"option2, ...]]])`` where name_to_geocode is a literal or a column name that "
"must be geocoded. field_to_return if specified can be \"geometry\" for the "
"geometry (default), or a field name of the layer returned by :cpp:func:"
"`OGRGeocode`. The special field  \"raw\" can also be used to return the raw "
"response (XML string) of the geocoding service. option1, option2, etc.. must "
"be of the key=value format, and are options understood by :cpp:func:"
"`OGRGeocodeCreateSession` or OGRGeocode()."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:335
msgid ""
"This function internally uses the OGRGeocode() API. Refer to it for more "
"details."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:337
msgid "SELECT ST_Centroid(ogr_geocode('Paris'))"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:345
msgid ""
"OGRFeature(SELECT):0\n"
"POINT (2.34287687375113 48.856622357411)"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:348
msgid ""
"ogrinfo cities.csv -dialect sqlite -sql \"SELECT *, ogr_geocode(city, "
"'country_code') AS country_code, ST_Centroid(ogr_geocode(city)) FROM cities\""
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:359
msgid ""
"OGRFeature(SELECT):0\n"
"  city (String) = Paris\n"
"  country_code (String) = fr\n"
"  POINT (2.34287687375113 48.856622357411)\n"
"\n"
"OGRFeature(SELECT):1\n"
"  city (String) = London\n"
"  country_code (String) = gb\n"
"  POINT (-0.109415723431508 51.5004964757441)\n"
"\n"
"OGRFeature(SELECT):2\n"
"  city (String) = Rennes\n"
"  country_code (String) = fr\n"
"  POINT (-1.68185479486048 48.1116771631195)\n"
"\n"
"OGRFeature(SELECT):3\n"
"  city (String) = New York\n"
"  country_code (String) = us\n"
"  POINT (-73.9388908443975 40.6632061220125)\n"
"\n"
"OGRFeature(SELECT):4\n"
"  city (String) = Beijing\n"
"  country_code (String) = cn\n"
"  POINT (116.3912972 39.9057136)"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:387
msgid ""
"``ogr_geocode_reverse(longitude, latitude, field_to_return [, option1 [, "
"option2, ...]])`` where longitude, latitude is the coordinate to query. "
"field_to_return must be a field name of the layer returned by "
"OGRGeocodeReverse() (for example 'display_name'). The special field  \"raw\" "
"can also be used to return the raw response (XML string) of the geocoding "
"service. option1, option2, etc.. must be of the key=value format, and are "
"options understood by OGRGeocodeCreateSession() or OGRGeocodeReverse()."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:394
msgid ""
"``ogr_geocode_reverse(geometry, field_to_return [, option1 [, "
"option2, ...]])`` is also accepted as an alternate syntax where geometry is "
"a (Spatialite) point geometry."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:397
msgid ""
"This function internally uses the :cpp:func:`OGRGeocodeReverse` API. Refer "
"to it for more details."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:400
msgid "Spatialite spatial index"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:402
msgid ""
"Spatialite spatial index mechanism can be triggered by making sure a spatial "
"index virtual table is mentioned in the SQL (of the form "
"idx_layername_geometrycolumn), or by using the more recent SpatialIndex from "
"the VirtualSpatialIndex extension. In which case, a in-memory RTree will be "
"built to be used to speed up the spatial queries."
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:407
msgid ""
"For example, a spatial intersection between 2 layers, by using a spatial "
"index on one of the layers to limit the number of actual geometry "
"intersection computations :"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:410
msgid ""
"SELECT city_name, region_name FROM cities, regions WHERE\n"
"    ST_Area(ST_Intersection(cities.geometry, regions.geometry)) > 0 AND\n"
"    regions.rowid IN (\n"
"        SELECT pkid FROM idx_regions_geometry WHERE\n"
"            xmax >= MbrMinX(cities.geometry) AND xmin <= MbrMaxX(cities."
"geometry) AND\n"
"            ymax >= MbrMinY(cities.geometry) AND ymin <= MbrMaxY(cities."
"geometry))"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:419
msgid "or more elegantly :"
msgstr ""

#: ../../../source/user/sql_sqlite_dialect.rst:421
msgid ""
"SELECT city_name, region_name FROM cities, regions WHERE\n"
"    ST_Area(ST_Intersection(cities.geometry, regions.geometry)) > 0 AND\n"
"    regions.rowid IN (\n"
"        SELECT rowid FROM SpatialIndex WHERE\n"
"            f_table_name = 'regions' AND search_frame = cities.geometry)"
msgstr ""
