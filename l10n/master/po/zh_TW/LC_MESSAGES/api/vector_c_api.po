# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-22 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/api/vector_c_api.rst:5
msgid "ogr_core.h and ogr_api.h: Vector C API"
msgstr ""

#: ../../../source/api/vector_c_api.rst:0
msgid "Defines"
msgstr ""

#: ../../../source/api/vector_c_api.rst:0
msgid "Typedefs"
msgstr ""

#: ../../../source/api/vector_c_api.rst:0
msgid "Enums"
msgstr ""

#: ../../../source/api/vector_c_api.rst:0
msgid "Functions"
msgstr ""

#: ../../../source/api/vector_c_api.rst:0
msgid "Parameters"
msgstr ""

#: ../../../source/api/vector_c_api.rst:0
msgid "Returns"
msgstr ""

#: ../../../source/api/vector_c_api.rst:0
msgid "Public Functions"
msgstr ""

#: ../../../source/api/vector_c_api.rst:0
msgid "Public Members"
msgstr ""

#: ../../../source/api/vector_c_api.rst:-1
msgid ""
"struct ArrowArrayStream stream;\n"
"if( !OGR_L_GetArrowStream(hLayer, &stream, nullptr))\n"
"{\n"
"    CPLError(CE_Failure, CPLE_AppDefined,\n"
"             \"OGR_L_GetArrowStream() failed\\n\");\n"
"    exit(1);\n"
"}\n"
"struct ArrowSchema schema;\n"
"if( stream.get_schema(&stream, &schema) == 0 )\n"
"{\n"
"    // Do something useful\n"
"    schema.release(schema);\n"
"}\n"
"while( true )\n"
"{\n"
"    struct ArrowArray array;\n"
"    // Look for an error (get_next() returning a non-zero code), or\n"
"    // end of iteration (array.release == nullptr)\n"
"    if( stream.get_next(&stream, &array) != 0 ||\n"
"        array.release == nullptr )\n"
"    {\n"
"        break;\n"
"    }\n"
"    // Do something useful\n"
"    array.release(&array);\n"
"}\n"
"stream.release(&stream);"
msgstr ""

#: ../../../source/api/vector_c_api.rst:-1
msgid ""
"def copy_layer(src_lyr, out_filename, out_format, lcos = {}):\n"
"    stream = src_lyr.GetArrowStream()\n"
"    schema = stream.GetSchema()\n"
"\n"
"    # If the source layer has a FID column and the output driver supports\n"
"    # a FID layer creation option, set it to the source FID column name.\n"
"    if src_lyr.GetFIDColumn():\n"
"        creationOptions = gdal.GetDriverByName(out_format).GetMetadataItem(\n"
"            \"DS_LAYER_CREATIONOPTIONLIST\"\n"
"        )\n"
"        if creationOptions and '\"FID\"' in creationOptions:\n"
"            lcos[\"FID\"] = src_lyr.GetFIDColumn()\n"
"\n"
"    with ogr.GetDriverByName(out_format).CreateDataSource(out_filename) as "
"out_ds:\n"
"        if src_lyr.GetLayerDefn().GetGeomFieldCount() > 1:\n"
"            out_lyr = out_ds.CreateLayer(\n"
"                src_lyr.GetName(), geom_type=ogr.wkbNone, options=lcos\n"
"            )\n"
"            for i in range(src_lyr.GetLayerDefn().GetGeomFieldCount()):\n"
"                out_lyr.CreateGeomField(src_lyr.GetLayerDefn()."
"GetGeomFieldDefn(i))\n"
"        else:\n"
"            out_lyr = out_ds.CreateLayer(\n"
"                src_lyr.GetName(),\n"
"                geom_type=src_lyr.GetGeomType(),\n"
"                srs=src_lyr.GetSpatialRef(),\n"
"                options=lcos,\n"
"            )\n"
"\n"
"        success, error_msg = out_lyr.IsArrowSchemaSupported(schema)\n"
"        assert success, error_msg\n"
"\n"
"        src_geom_field_names = [\n"
"            src_lyr.GetLayerDefn().GetGeomFieldDefn(i).GetName()\n"
"            for i in range(src_lyr.GetLayerDefn().GetGeomFieldCount())\n"
"        ]\n"
"        for i in range(schema.GetChildrenCount()):\n"
"            # GetArrowStream() may return \"OGC_FID\" for a unnamed source "
"FID\n"
"            # column and \"wkb_geometry\" for a unnamed source geometry "
"column.\n"
"            # Also test GetFIDColumn() and src_geom_field_names if they are\n"
"            # named.\n"
"            if (\n"
"                schema.GetChild(i).GetName()\n"
"                not in (\"OGC_FID\", \"wkb_geometry\", src_lyr."
"GetFIDColumn())\n"
"                and schema.GetChild(i).GetName() not in "
"src_geom_field_names\n"
"            ):\n"
"                out_lyr.CreateFieldFromArrowSchema(schema.GetChild(i))\n"
"\n"
"        write_options = []\n"
"        if src_lyr.GetFIDColumn():\n"
"            write_options.append(\"FID=\" + src_lyr.GetFIDColumn())\n"
"        if (\n"
"            src_lyr.GetLayerDefn().GetGeomFieldCount() == 1\n"
"            and src_lyr.GetGeometryColumn()\n"
"        ):\n"
"            write_options.append(\"GEOMETRY_NAME=\" + src_lyr."
"GetGeometryColumn())\n"
"\n"
"        while True:\n"
"            array = stream.GetNextRecordBatch()\n"
"            if array is None:\n"
"                break\n"
"            out_lyr.WriteArrowBatch(schema, array, write_options)"
msgstr ""

#: ../../../source/api/vector_c_api.rst:-1
msgid ""
"#include \"ogrsf_frmts.h\"\n"
"#include \"cpl_string.h\"\n"
"\n"
"...\n"
"\n"
"        OGRLayerH *hLayer;\n"
"        char     **papszOptions;\n"
"\n"
"        if( OGR_DS_TestCapability( hDS, ODsCCreateLayer ) )\n"
"        {\n"
"            ...\n"
"        }\n"
"\n"
"        papszOptions = CSLSetNameValue( papszOptions, \"DIM\", \"2\" );\n"
"        hLayer = OGR_DS_CreateLayer( hDS, \"NewLayer\", NULL, wkbUnknown,\n"
"                                     papszOptions );\n"
"        CSLDestroy( papszOptions );\n"
"\n"
"        if( hLayer == NULL )\n"
"        {\n"
"            ...\n"
"        }"
msgstr ""
