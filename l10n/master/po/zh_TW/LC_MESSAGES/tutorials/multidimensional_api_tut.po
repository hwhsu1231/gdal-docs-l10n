# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-22 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/tutorials/multidimensional_api_tut.rst:5
msgid "Multidimensional raster API tutorial"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:8
msgid "Read the content of an array"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:11
msgid "In C++"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:13
msgid ""
"#include \"gdal_priv.h\"\n"
"int main()\n"
"{\n"
"    GDALAllRegister();\n"
"    auto poDataset = std::unique_ptr<GDALDataset>(\n"
"        GDALDataset::Open( \"in.nc\", GDAL_OF_MULTIDIM_RASTER ));\n"
"    if( !poDataset )\n"
"    {\n"
"        exit(1);\n"
"    }\n"
"    auto poRootGroup = poDataset->GetRootGroup();\n"
"    if( !poRootGroup )\n"
"    {\n"
"        exit(1);\n"
"    }\n"
"    auto poVar = poRootGroup->OpenMDArray(\"temperature\");\n"
"    if( !poVar )\n"
"    {\n"
"        exit(1);\n"
"    }\n"
"    size_t nValues = 1;\n"
"    std::vector<size_t> anCount;\n"
"    for( const auto poDim: poVar->GetDimensions() )\n"
"    {\n"
"        anCount.push_back(static_cast<size_t>(poDim->GetSize()));\n"
"        nValues *= anCount.back();\n"
"    }\n"
"    std::vector<double> values(nValues);\n"
"    poVar->Read(std::vector<GUInt64>{0,0,0}.data(),\n"
"                anCount.data(),\n"
"                nullptr, /* step: defaults to 1,1,1 */\n"
"                nullptr, /* stride: default to row-major convention */\n"
"                GDALExtendedDataType::Create(GDT_Float64),\n"
"                &values[0]);\n"
"    return 0;\n"
"}"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:53
msgid "In C"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:55
msgid ""
"#include \"gdal.h\"\n"
"#include \"cpl_conv.h\"\n"
"int main()\n"
"{\n"
"    GDALDatasetH hDS;\n"
"    GDALGroupH hGroup;\n"
"    GDALMDArrayH hVar;\n"
"    size_t nDimCount;\n"
"    GDALDimensionH* dims;\n"
"    size_t nValues;\n"
"    size_t i;\n"
"    size_t* panCount;\n"
"    GUInt64* panOffset;\n"
"    double* padfValues;\n"
"    GDALExtendedDataTypeH hDT;\n"
"\n"
"    GDALAllRegister();\n"
"    hDS = GDALOpenEx( \"in.nc\", GDAL_OF_MULTIDIM_RASTER, NULL, NULL, "
"NULL);\n"
"    if( !hDS )\n"
"    {\n"
"        exit(1);\n"
"    }\n"
"    hGroup = GDALDatasetGetRootGroup(hDS);\n"
"    GDALReleaseDataset(hDS);\n"
"    if( !hGroup )\n"
"    {\n"
"        exit(1);\n"
"    }\n"
"    hVar = GDALGroupOpenMDArray(hGroup, \"temperature\", NULL);\n"
"    GDALGroupRelease(hGroup);\n"
"    if( !hVar )\n"
"    {\n"
"        exit(1);\n"
"    }\n"
"\n"
"    dims = GDALMDArrayGetDimensions(hVar, &nDimCount);\n"
"    panCount = (size_t*)CPLMalloc(nDimCount * sizeof(size_t));\n"
"    nValues = 1;\n"
"    for( i = 0; i < nDimCount; i++ )\n"
"    {\n"
"        panCount[i] = GDALDimensionGetSize(dims[i]);\n"
"        nValues *= panCount[i];\n"
"    }\n"
"    GDALReleaseDimensions(dims, nDimCount);\n"
"    panOffset = (GUInt64*)CPLCalloc(nDimCount, sizeof(GUInt64));\n"
"\n"
"    padfValues = (double*)VSIMalloc2(nValues, sizeof(double));\n"
"    if( !padfValues )\n"
"    {\n"
"        GDALMDArrayRelease(hVar);\n"
"        CPLFree(panOffset);\n"
"        CPLFree(panCount);\n"
"        exit(1);\n"
"    }\n"
"    hDT = GDALExtendedDataTypeCreate(GDT_Float64);\n"
"    GDALMDArrayRead(hVar,\n"
"                    panOffset,\n"
"                    panCount,\n"
"                    NULL, /* step: defaults to 1,1,1 */\n"
"                    NULL, /* stride: default to row-major convention */\n"
"                    hDT,\n"
"                    padfValues,\n"
"                    NULL, /* array start. Omitted */\n"
"                    0 /* array size in bytes. Omitted */);\n"
"    GDALExtendedDataTypeRelease(hDT);\n"
"    GDALMDArrayRelease(hVar);\n"
"    CPLFree(panOffset);\n"
"    CPLFree(panCount);\n"
"    VSIFree(padfValues);\n"
"\n"
"    return 0;\n"
"}"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:131
msgid "In Python"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:133
msgid ""
"from osgeo import gdal\n"
"ds = gdal.OpenEx(\"in.nc\", gdal.OF_MULTIDIM_RASTER)\n"
"rootGroup = ds.GetRootGroup()\n"
"var = rootGroup.OpenMDArray(\"temperature\")\n"
"data = var.Read(buffer_datatype = gdal.ExtendedDataType.Create(gdal."
"GDT_Float64))"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:141
msgid "If NumPy is available:"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:143
msgid ""
"from osgeo import gdal\n"
"ds = gdal.OpenEx(\"in.nc\", gdal.OF_MULTIDIM_RASTER)\n"
"rootGroup = ds.GetRootGroup()\n"
"var = rootGroup.OpenMDArray(\"temperature\")\n"
"data = var.ReadAsArray(buffer_datatype = gdal.ExtendedDataType.Create(gdal."
"GDT_Float64))"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:153
msgid "Other examples"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:155
msgid "Test scripts from the GDAL autotest suite"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:157
msgid ""
":ref:`MEM <raster.mem>` driver: :source_file:`autotest/gdrivers/memmultidim."
"py`"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:158
msgid ""
":ref:`netCDF <raster.netcdf>` driver: :source_file:`autotest/gdrivers/"
"netcdf_multidim.py`"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:159
msgid ""
":ref:`HDF5 <raster.hdf5>` driver: :source_file:`autotest/gdrivers/"
"hdf5multidim.py`"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:160
msgid ""
":ref:`VRT <raster.vrt>` driver: :source_file:`autotest/gdrivers/vrtmultidim."
"py`"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:161
msgid ""
":ref:`gdalmdiminfo` tests: :source_file:`autotest/utilities/"
"test_gdalmdiminfo_lib.py`"
msgstr ""

#: ../../../source/tutorials/multidimensional_api_tut.rst:162
msgid ""
":ref:`gdalmdimtranslate` tests: :source_file:`autotest/utilities/"
"test_gdalmdimtranslate_lib.py`"
msgstr ""
