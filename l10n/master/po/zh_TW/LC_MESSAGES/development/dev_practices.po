# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-26 10:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/development/dev_practices.rst:5
msgid "Development practices"
msgstr ""

#: ../../../source/development/dev_practices.rst:8
msgid "Making changes to GDAL"
msgstr ""

#: ../../../source/development/dev_practices.rst:10
msgid ""
"Minor changes to GDAL, such as bug fixes, may be made by opening a GitHub "
"pull request."
msgstr ""

#: ../../../source/development/dev_practices.rst:12
msgid ""
"Major changes should be discussed on the |gdal-dev| listserv and may require "
"the drafting of a RFC (request for comment) document."
msgstr ""

#: ../../../source/development/dev_practices.rst:15
msgid ""
"GDAL's policy on substantial code additions is documented at :ref:`rfc-85`."
msgstr ""

#: ../../../source/development/dev_practices.rst:18
msgid "Portability"
msgstr ""

#: ../../../source/development/dev_practices.rst:20
msgid ""
"GDAL strives to be widely portable to 32 bit and 64 bit computing "
"environments, as well as little-endian and big-endian ordered CPUs. CPL "
"functions in the port directory provide services to abstract platform "
"specific operations."
msgstr ""

#: ../../../source/development/dev_practices.rst:25
msgid ""
"Generally speaking, where available CPL functions should be used in "
"preference to operating system functions for operations like memory "
"allocation, path parsing, filesystem I/O (using VSILFILE* / "
"VSIVirtualFile*), ODBC access, etc."
msgstr ""

#: ../../../source/development/dev_practices.rst:31
msgid "C/C++ standards"
msgstr ""

#: ../../../source/development/dev_practices.rst:33
msgid ""
"The current C and C++ standards adopted by GDAL/OGR are C99 and C++17 (last "
"updated per :ref:`rfc-98`)`"
msgstr ""

#: ../../../source/development/dev_practices.rst:37
msgid "Variable naming"
msgstr ""

#: ../../../source/development/dev_practices.rst:39
msgid ""
"Much of the existing GDAL/OGR code uses an adapted Hungarian naming "
"convention. Use of this convention is not mandatory, but when maintaining "
"code using this convention it is desirable to continue adhering to it with "
"changes. Most importantly, please avoiding using it improperly as that can "
"be very confusing."
msgstr ""

#: ../../../source/development/dev_practices.rst:45
msgid ""
"In Hungarian prefixing the prefix tells something about about the type, and "
"potentially semantics of a variable. The following are some prefixes used in "
"GDAL/OGR."
msgstr ""

#: ../../../source/development/dev_practices.rst:49
msgid "*a*: array"
msgstr ""

#: ../../../source/development/dev_practices.rst:50
msgid ""
"*b*: C/C++ bool. In C code that pre-dates C99 adoption, it is also used for"
msgstr ""

#: ../../../source/development/dev_practices.rst:51
msgid "ints with only TRUE/FALSE values."
msgstr ""

#: ../../../source/development/dev_practices.rst:52
msgid "*by*: byte (GByte / unsigned char)."
msgstr ""

#: ../../../source/development/dev_practices.rst:53
msgid "*df*: floating point value (double precision)"
msgstr ""

#: ../../../source/development/dev_practices.rst:54
msgid "*e*: enumeration"
msgstr ""

#: ../../../source/development/dev_practices.rst:55
msgid "*i*: integer number used as a zero based array or loop index."
msgstr ""

#: ../../../source/development/dev_practices.rst:56
msgid "*f*: floating point value (single precision)"
msgstr ""

#: ../../../source/development/dev_practices.rst:57
msgid "*h*: an opaque handle (such as GDALDatasetH)."
msgstr ""

#: ../../../source/development/dev_practices.rst:58
msgid "*n*: integer number (size unspecified)"
msgstr ""

#: ../../../source/development/dev_practices.rst:59
msgid "*o*: C++ object"
msgstr ""

#: ../../../source/development/dev_practices.rst:60
msgid "*os*: CPLString or std::string"
msgstr ""

#: ../../../source/development/dev_practices.rst:61
msgid "*p*: pointer"
msgstr ""

#: ../../../source/development/dev_practices.rst:62
msgid "*psz*: pointer to a null-terminated string. (eg. \"char \\*pszName;\")"
msgstr ""

#: ../../../source/development/dev_practices.rst:63
msgid "*sz*: null-terminated string (eg.\" char szName[100];\")"
msgstr ""

#: ../../../source/development/dev_practices.rst:64
msgid "*k*: compile-time constant"
msgstr ""

#: ../../../source/development/dev_practices.rst:66
msgid ""
"Prefixes can be stacked. The following are some examples of meaningful "
"variables."
msgstr ""

#: ../../../source/development/dev_practices.rst:69
msgid "\\*char !\\*\\ *papszTokens*: Pointer to an array of strings."
msgstr ""

#: ../../../source/development/dev_practices.rst:70
msgid "\\*int *panBands*: Pointer to the first element of an array of numbers."
msgstr ""

#: ../../../source/development/dev_practices.rst:72
msgid ""
"\\*double *padfScanline*: Pointer to the first element of an array of "
"doubles."
msgstr ""

#: ../../../source/development/dev_practices.rst:74
msgid "\\*double *pdfMeanRet*: Pointer to a single double."
msgstr ""

#: ../../../source/development/dev_practices.rst:75
msgid "\\*GDALRasterBand *poBand*: Pointer to a single object."
msgstr ""

#: ../../../source/development/dev_practices.rst:76
msgid "\\*GByte *pabyHeader*: Pointer to an array of bytes."
msgstr ""

#: ../../../source/development/dev_practices.rst:78
msgid ""
"It may also be noted that the standard convention for variable names is to "
"capitalize each word in a variable name."
msgstr ""

#: ../../../source/development/dev_practices.rst:82
msgid "Memory allocation"
msgstr ""

#: ../../../source/development/dev_practices.rst:84
msgid ""
"As per :ref:`rfc-19`, you can use VSIMalloc2(x, y) instead of doing "
"CPLMalloc(x \\* y) or VSIMalloc(x \\* y). VSIMalloc2 will detect potential "
"overflows in the multiplication and return a NULL pointer if it happens. "
"This can be useful in GDAL raster drivers where x and y are related to the "
"raster dimensions or raster block sizes. Similarly, VSIMalloc3(x, y, z) can "
"be used as a replacement for CPLMalloc(x \\* y \\* z)."
msgstr ""

#: ../../../source/development/dev_practices.rst:93
msgid "File naming and code formatting"
msgstr ""

#: ../../../source/development/dev_practices.rst:95
msgid "Use lower case filenames."
msgstr ""

#: ../../../source/development/dev_practices.rst:96
msgid "Use .cpp extension for C++ files (not .cc)."
msgstr ""

#: ../../../source/development/dev_practices.rst:97
msgid ""
"Code formatting rules are defined in :source_file:`.clang-format`. The pre-"
"commit utility can be used to enforce them automatically."
msgstr ""

#: ../../../source/development/dev_practices.rst:102
msgid "Git usage"
msgstr ""

#: ../../../source/development/dev_practices.rst:104
msgid ""
"This section collects a few best practices for git usage for GDAL "
"development."
msgstr ""

#: ../../../source/development/dev_practices.rst:107
msgid "Initiating your work repository"
msgstr ""

#: ../../../source/development/dev_practices.rst:109
msgid "Fork |OSGeo/gdal| from the GitHub UI, and then run:"
msgstr ""

#: ../../../source/development/dev_practices.rst:111
msgid ""
"git clone https://github.com/OSGeo/gdal\n"
"cd gdal\n"
"git remote add my_user_name git@github.com:my_user_name/gdal.git"
msgstr ""

#: ../../../source/development/dev_practices.rst:118
msgid "Working with a feature branch"
msgstr ""

#: ../../../source/development/dev_practices.rst:120
msgid ""
"git checkout master\n"
"# potentially update your local master against upstream, as described above\n"
"git checkout -b my_new_feature_branch\n"
"\n"
"# do work. For example:\n"
"git add my_new_file\n"
"git add my_modifid_message\n"
"git rm old_file\n"
"git commit -a\n"
"\n"
"# you may need to resynchronize against master if you need some bugfix\n"
"# or new capability that has been added since you created your branch\n"
"git fetch origin\n"
"git rebase origin/master\n"
"\n"
"# At end of your work, make sure history is reasonable by folding non\n"
"# significant commits into a consistent set\n"
"git rebase -i master\n"
"# use 'fixup' for example to merge several commits together,\n"
"# and 'reword' to modify commit messages\n"
"\n"
"# or alternatively, in case there is a big number of commits and marking\n"
"# all them as 'fixup' is tedious\n"
"git fetch origin\n"
"git rebase origin/master\n"
"git reset --soft origin/master\n"
"git commit -a -m \"Put here the synthetic commit message\"\n"
"\n"
"# push your branch\n"
"git push my_user_name my_new_feature_branch"
msgstr ""

#: ../../../source/development/dev_practices.rst:154
msgid "From the GitHub UI, issue a pull request."
msgstr ""

#: ../../../source/development/dev_practices.rst:156
msgid ""
"If the pull request discussion or automated checks require changes, commit "
"locally and push. To get a reasonable history, you may need to combine "
"commits using ``git rebase -i master``, in which case you will have to force-"
"push your branch with ``git push -f my_user_name my_new_feature_branch``."
msgstr ""

#: ../../../source/development/dev_practices.rst:163
msgid "Updating your local master against upstream master"
msgstr ""

#: ../../../source/development/dev_practices.rst:165
msgid ""
"git checkout master\n"
"git fetch origin\n"
"\n"
"# Be careful: this will lose all local changes you might have done now\n"
"git reset --hard origin/master"
msgstr ""

#: ../../../source/development/dev_practices.rst:174
msgid "Commit messages"
msgstr ""

#: ../../../source/development/dev_practices.rst:176
msgid ""
"Commit messages should indicate a component name (eg a driver name), a short "
"description, and when relevant, a reference to a issue (with 'fixes #' if it "
"actually fixes it)"
msgstr ""

#: ../../../source/development/dev_practices.rst:182
msgid ""
"COMPONENT_NAME: fix bla bla (fixes #1234)\n"
"\n"
"Details here..."
msgstr ""

#: ../../../source/development/dev_practices.rst:187
msgid "Commit hooks"
msgstr ""

#: ../../../source/development/dev_practices.rst:189
msgid ""
"GDAL provides pre-commit hooks to run code linters before a commit is made. "
"The hooks are cloned with the repository and can be installed using `pre-"
"commit <https://pre-commit.com>`_:"
msgstr ""

#: ../../../source/development/dev_practices.rst:193
msgid ""
"python3 -m pip install pre-commit\n"
"pre-commit install"
msgstr ""

#: ../../../source/development/dev_practices.rst:199
msgid ""
"Once installed, the hooks can be run manually via ``pre-commit run --all-"
"files``."
msgstr ""

#: ../../../source/development/dev_practices.rst:202
msgid "Blame ignore file"
msgstr ""

#: ../../../source/development/dev_practices.rst:204
msgid ""
"Due to whole-tree code reformatting done during GDAL 3.7 development, ``git "
"blame`` information might be misleading. To avoid that, you need to modify "
"your git configuration as following to ignore the revision of the whole-tree "
"reformatting:"
msgstr ""

#: ../../../source/development/dev_practices.rst:209
msgid "git config blame.ignoreRevsFile .git-blame-ignore-revs"
msgstr ""

#: ../../../source/development/dev_practices.rst:215
msgid "Backporting bugfixes from master to a stable branch"
msgstr ""

#: ../../../source/development/dev_practices.rst:217
msgid ""
"git checkout master\n"
"With git log, identify the sha1sum of the commit you want to backport\n"
"git checkout 2.2 # if you want to backport to 2.2\n"
"git pull origin 2.2\n"
"# git checkout -b branch_name  # if you intend to submit the backport as a "
"pull request\n"
"git cherry-pick the_sha1_sum\n"
"git push ..."
msgstr ""

#: ../../../source/development/dev_practices.rst:227
msgid "If changes are needed, do them and ``git commit -a --amend``"
msgstr ""

#: ../../../source/development/dev_practices.rst:231
msgid "Things you should NOT do"
msgstr ""

#: ../../../source/development/dev_practices.rst:233
msgid ""
"(For anyone with push rights to |OSGeo/gdal|) Never modify a commit or the "
"history of anything that has been committed to https://github.com/OSGeo/gdal"
msgstr ""

#: ../../../source/development/dev_practices.rst:237
msgid ""
"Committing symbolic links is allowed only under the .github directory in "
"order to avoid potential problems on Windows."
msgstr ""
