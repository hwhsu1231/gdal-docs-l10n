# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-22 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:5
msgid "RFC 97: OGRFeatureDefn, OGRFieldDefn and OGRGeomFieldDefn \"sealing\""
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:8
msgid "Author:"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:8
msgid "Even Rouault"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:9
msgid "Contact:"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:9
msgid "even.rouault @ spatialys.com"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:10
msgid "Started:"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:10
msgid "2023-Nov-16"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:11
msgid "Status:"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:11
msgid "Adopted, implemented"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:12
msgid "Target:"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:12
msgid "GDAL 3.9"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:16
msgid "Summary"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:18
msgid ""
"This RFC aims at avoiding common misuse of the setter methods of the "
"OGRFeatureDefn, OGRFieldDefn and OGRGeomFieldDefn classes. Indeed, the "
"setter methods of those classes should not be used directly by user code "
"(that is non driver implementations), on instances that are owned by a "
"OGRLayer. It is quite frequent for users (even seasoned ones) to neglect "
"that constraint. Hence this RFC introduces an optional \"sealing\" "
"capability that drivers can enable to avoid users modifying instances that "
"they should not."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:27
msgid "Motivation"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:29
msgid ""
"Let's take an example to clarify. We want to prevent a user from doing the "
"following:"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:32
msgid ""
"poLayer->GetLayerDefn()->GetFieldDefn(iFieldIdx)->SetName(\"new_name\");"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:36
msgid ""
"The above code will not raise any warning or error at runtime, but will not "
"change the underlying on-disk dataset to reflect the new field name. Indeed "
"poLayer->GetLayerDefn() and its child objects should be considered "
"immutable, unless using dedicated methods of OGRLayer to modify them. The "
"correct way of renaming an existing field is (for drivers that support such "
"capability):"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:43
msgid ""
"OGRFieldDefn oRenamedField(\"new_name\", poLayer->GetLayerDefn()-"
">GetFieldDefn(iFieldIdx)->GetType());\n"
"poLayer->AlterFieldDefn(iFieldIdx, &oRenamedField, ALTER_NAME_FLAG);"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:48
msgid ""
"For other operations, such as calling :cpp:func:`OGRFieldDefn::"
"AddFieldDefn()` or :cpp:func:`OGRFieldDefn::DeleteFieldDefn()` on an "
"instance of OGRLayer::GetLayerDefn(), crashes could potentially occur in "
"drivers that are not ready to see the number of fields to change behind "
"their back. The correct way of adding or deleting fields to a layer is to "
"use :cpp:func:`OGRLayer::CreateField()` or :cpp:func:`OGRLayer::"
"DeleteField()`"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:56
msgid "Details"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:58
msgid ""
"A ``bool m_bSealed`` member variable is added to the :cpp:class:"
"`OGRFieldDefn` and :cpp:class:`OGRGeomFieldDefn` classes. Its default value "
"is false, meaning that calling setters method on instances of those classes "
"is allowed by default."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:63
msgid ""
"The following methods are added on :cpp:class:`OGRFieldDefn` (and similarly "
"for :cpp:class:`OGRGeomFieldDefn`)"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:66
msgid ""
"/** Seal a OGRFieldDefn.\n"
" *\n"
" * A sealed OGRFieldDefn can not be modified while it is sealed.\n"
" *\n"
" * This method should only be called by driver implementations.\n"
" *\n"
" * @since GDAL 3.9\n"
" */\n"
"void OGRFieldDefn::Seal()\n"
"{\n"
"    m_bSealed = true;\n"
"}\n"
"\n"
"/** Unseal a OGRFieldDefn.\n"
" *\n"
" * Undo OGRFieldDefn::Seal()\n"
" *\n"
" * Using GetTemporaryUnsealer() is recommended for most use cases.\n"
" *\n"
" * This method should only be called by driver implementations.\n"
" *\n"
" * @since GDAL 3.9\n"
" */\n"
"void OGRFieldDefn::Unseal()\n"
"{\n"
"    m_bSealed = false;\n"
"}"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:97
msgid ""
"All setter methods of those classes are modified to check the value of "
"``m_bSealed``. If it is set, a CE_Failure CPLError() is emitted indicating "
"that the object is sealed. Unfortunately most setters return ``void``, so "
"there is no way to advertise the error through an error code. However, when "
"using the Python bindings with exceptions enabled, a Python exception will "
"be thrown."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:103
msgid ""
"A convenience method is also offered to use the Resource Acquisition Is "
"Initialization (RAII) paradygm to temporary unseal an instance, which is an "
"operation that drivers implementing AlterFieldDefn() / AlterGeomFieldDefn() "
"will need to do on fields they have priorly sealed."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:108
msgid ""
"/** Return an object that temporary unseals the OGRFieldDefn\n"
" *\n"
" * The returned object calls Unseal() initially, and when it is destroyed\n"
" * it calls Seal().\n"
" *\n"
" * This method should only be called by driver implementations.\n"
" *\n"
" * @since GDAL 3.9\n"
" */\n"
"OGRFieldDefn::TemporaryUnsealer OGRFieldDefn::GetTemporaryUnsealer()\n"
"{\n"
"    return TemporaryUnsealer(this);\n"
"}"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:124
msgid "Typical usage is by AlterFieldDefn() / AlterGeomFieldDefn() is:"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:126
msgid ""
"OGRErr OGRPGTableLayer::AlterFieldDefn(int iField, OGRFieldDefn "
"*poNewFieldDefn, int nFlagsIn)\n"
"{\n"
"    OGRFieldDefn *poFieldDefn = poFeatureDefn->GetFieldDefn(iField);\n"
"    auto oTemporaryUnsealer(poFieldDefn->GetTemporaryUnsealer());\n"
"    // modify poFieldDefn to reflect changed properties of poNewFieldDefn\n"
"    // according to nFlagsIn.\n"
"    ...\n"
"}"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:138
#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:215
msgid ""
"For punctual changes, a convenience ``whileUnsealing`` function is also "
"provided."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:141
msgid "It can be used as in the following:"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:143
msgid "whileUnsealing(poFieldDefn)->SetType(eNewType);"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:148
msgid ""
"For OGRFeatureDefn, similar changes are done but with an extra subtelty. For "
"convenience of drivers, we want a driver to be able to call "
"GetTemporaryUnsealer() in a nested way, where only the first/most external "
"call does something, and next/nested ones are a no-operation. This is "
"similar to using a recursive mutex from the same thread. The user can also "
"indicate if it wishes fields and geometry fields owned by the OGRFeatureDefn "
"to be sealed/unsealed at the same time."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:155
msgid ""
"/** Seal a OGRFeatureDefn.\n"
" *\n"
" * A sealed OGRFeatureDefn can not be modified while it is sealed.\n"
" *\n"
" * This method also call OGRFieldDefn::Seal() and OGRGeomFieldDefn::Seal()\n"
" * on its fields and geometry fields.\n"
" *\n"
" * This method should only be called by driver implementations.\n"
" *\n"
" * @param bSealFields Whether fields and geometry fields should be sealed.\n"
" *                    This is generally desirabled, but in case of deferred\n"
" *                    resolution of them, this parameter should be set to "
"false.\n"
" * @since GDAL 3.9\n"
" */\n"
"void OGRFeatureDefn::Seal(bool bSealFields);\n"
"\n"
"\n"
"/** Unseal a OGRFeatureDefn.\n"
" *\n"
" * Undo OGRFeatureDefn::Seal()\n"
" *\n"
" * This method also call OGRFieldDefn::Unseal() and OGRGeomFieldDefn::"
"Unseal()\n"
" * on its fields and geometry fields.\n"
" *\n"
" * Using GetTemporaryUnsealer() is recommended for most use cases.\n"
" *\n"
" * This method should only be called by driver implementations.\n"
" *\n"
" * @param bUnsealFields Whether fields and geometry fields should be "
"unsealed.\n"
" *                      This is generally desirabled, but in case of "
"deferred\n"
" *                      resolution of them, this parameter should be set to\n"
" * false.\n"
" * @since GDAL 3.9\n"
" */\n"
"void OGRFeatureDefn::Unseal(bool bUnsealFields);\n"
"\n"
"/** Return an object that temporary unseals the OGRFeatureDefn\n"
" *\n"
" * The returned object calls Unseal() initially, and when it is destroyed\n"
" * it calls Seal().\n"
" * This method should be called on a OGRFeatureDefn that has been sealed\n"
" * previously.\n"
" * GetTemporaryUnsealer() calls may be nested, in which case only the first\n"
" * one has an effect (similarly to a recursive mutex locked in a nested way\n"
" * from the same thread).\n"
" *\n"
" * This method should only be called by driver implementations.\n"
" *\n"
" * @param bSealFields Whether fields and geometry fields should be unsealed "
"and\n"
" *                    resealed.\n"
" *                    This is generally desirabled, but in case of deferred\n"
" *                    resolution of them, this parameter should be set to "
"false.\n"
" * @since GDAL 3.9\n"
" */\n"
"OGRFeatureDefn::TemporaryUnsealer\n"
"OGRFeatureDefn::GetTemporaryUnsealer(bool bSealFields = true);"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:218
msgid ""
"In practice, the only Seal() invocation in driver core should be done on the "
"OGRFeatureDefn instance they return with GetLayerDefn(). All subsequent "
"sealing/unsealing operations should be done through OGRFeatureDefn::"
"GetTemporaryUnsealer()"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:224
msgid "Example of a typical driver"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:226
msgid "Constructor of the OGRLayer subclass:"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:228
msgid ""
"OGRMyLayer::OGRMyLayer(...)\n"
"{\n"
"    m_poFeatureDefn = new OGRFeatureDefn(\"layer_name\");\n"
"    m_poFeatureDefn->Reference();\n"
"    SetDescription(m_poFeatureDefn->GetName());\n"
"    ... add fields with m_poFeatureDefn->AddFieldDefn() ...\n"
"    m_poFeatureDefn->Seal(true);\n"
"}"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:240
msgid "Simple CreateField() implementation:"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:242
msgid ""
"OGRErr OGRMyLayer::CreateField(OGRFieldDefn* poNewFieldDefn, int bApproxOK)\n"
"{\n"
"    whileUnsealing(m_poFeatureDefn)->AddFieldDefn(poNewFieldDefn);\n"
"    return OGRERR_NONE\n"
"}"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:251
msgid "Discussion"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:253
msgid ""
"Why not just having a ``const OGRFeatureDefn* OGRLayer::GetLayerDefn() "
"const`` method ?"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:256
msgid ""
"That would only work when using the C++ API (and would require changes in "
"all drivers to modify the signature, as well as doing changes at places "
"where drivers require a non-const OGRFeatureDefn*), because const "
"correctness is not available in the C API and the SWIG bindings."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:262
msgid "SWIG bindings"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:264
msgid ""
"No impact. Those C++ methods are intended to be used by driver "
"implementation only."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:268
msgid "Updated drivers"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:270
msgid ""
"For the initial implementation, the following drivers are updated to seal "
"their layer definition: GeoPackage, PostgreSQL, Shapefile, OpenFileGDB, "
"MITAB, Memory, GeoJSON, JSONFG, TopoJSON, ESRIJSON, ODS, XLSX."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:276
msgid "Backward compatibility"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:278
msgid ""
"C API is unchanged. Backwards compatible addition to the C++ API (ABI change)"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:280
msgid ""
"There is the possibility to break user code that mis-used the API. For "
"example, this was the case of a few tests in the autotest suite that have "
"had to be modified."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:284
msgid "MIGRATION_GUIDE.TXT will mention that and point to this RFC."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:287
msgid "Risks"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:289
msgid ""
"Drivers that implement sealing should make sure they unseal at the "
"appropriate places: OGRLayer::Rename(), CreateField(), DeleteField(), "
"CreateGeomField(), DeleteGeomField(), ReorderFields(), AlterFieldDefn() "
"AlterGeomFieldDefn() and any other places where they might modify objects. "
"Failure to do so will result in failures, and potentially crashes. Hence "
"implementation of sealing should only be done on drivers that have "
"sufficient test coverage."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:298
msgid "Documentation"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:300
msgid ""
"The documentation of the setters as well as the introduction text of "
"OGRFeatureDefn, OGRFieldDefn and OGRGeomFieldDefn is modified to reflect "
"that setters of those classes should not be called on instances returned by "
"OGRLayer::GetLayerDefn()."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:306
msgid "Testing"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:308
msgid "The autotest suite is modified to comply with sealing"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:309
msgid ""
"Calls to setters on sealed instances will be done to test that an error is "
"triggered."
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:313
msgid "Related issues and PRs"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:315
msgid "Candidate implementation in https://github.com/OSGeo/gdal/pull/8733"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:318
msgid "Voting history"
msgstr ""

#: ../../../source/development/rfc/rfc97_feature_and_fielddefn_sealing.rst:320
msgid "+1 from PSC members JukkaR, JavierJS and EvenR"
msgstr ""
