# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-22 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:5
msgid "RFC 59.1 : GDAL/OGR utilities as a library"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:7
msgid "Authors: Faza Mahamood, Even Rouault"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:9
msgid "Contact: fazamhd at gmail dot com, even.rouault at spatialys.com"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:11
msgid "Status: Adopted, implemented"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:13
msgid "Implementation version: 2.1"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:16
msgid "Summary"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:18
msgid ""
"This RFC defines how to expose GDAL/OGR C/C++ utilities as C callable "
"functions. The utility code is modified to call the new function. This RFC "
"gives a general frame and principles, demonstrated with a few utilities, but "
"aimed at being extended with other utilities."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:24
msgid "Rationale"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:26
msgid ""
"There is a need for calling GDAL utilities from code without involving "
"system calls, to be able to work on in-memory datasets and use progress/"
"cancellation callback functions."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:31
msgid "Changes"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:33
msgid ""
"A public header file gdal_utils.h is created which contains the public "
"declarations of GDAL utilities. The current header(still in progress) can be "
"found `here <https://github.com/rouault/gdal2/blob/rfc59.1/gdal/apps/"
"gdal_utils.h>`__."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:38
msgid ""
"Each utility has a function (XXXXOptionsNew) to create an option structure "
"from arguments specified as an array of strings. This function also accepts "
"as argument an extra semi-private structure used to cooperate with the code "
"of the command line utility itself."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:43
msgid "For GDALInfo():"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:47
msgid ""
"/*! Options for GDALInfo(). Opaque type */\n"
"typedef struct GDALInfoOptions GDALInfoOptions;\n"
"typedef struct GDALInfoOptionsForBinary GDALInfoOptionsForBinary;\n"
"\n"
"/**\n"
" * Allocates a GDALInfoOptions struct.\n"
" *\n"
" * @param papszArgv NULL terminated list of options (potentially including "
"filename and open options too)\n"
" *                  The accepted options are the one of the gdalinfo "
"utility.\n"
" * @param psOptionsForBinary (output) may be NULL (and should generally be "
"NULL),\n"
" *                           otherwise (gdalinfo_bin.cpp use case) must be "
"allocated with\n"
" *                           GDALInfoOptionsForBinaryNew() prior to this "
"function. Will be\n"
" *                           filled with potentially present filename, open "
"options, subdataset number...\n"
" * @return pointer to the allocated GDALInfoOptions struct.\n"
" *\n"
" * @since GDAL 2.1\n"
" */\n"
"GDALInfoOptions CPL_DLL *GDALInfoOptionsNew(char** papszArgv, "
"GDALInfoOptionsForBinary* psOptionsForBinary);\n"
"\n"
"void CPL_DLL GDALInfoOptionsFree( GDALInfoOptions *psOptions );\n"
"\n"
"/**\n"
" * Lists various information about a GDAL supported raster dataset.\n"
" *\n"
" * GDALInfoOptions* must be allocated and freed with GDALInfoOptionsNew()\n"
" * and GDALInfoOptionsFree() respectively.\n"
" *\n"
" * @param hDataset the dataset handle.\n"
" * @param psOptions the options structure returned by GDALInfoOptionsNew() "
"or NULL.\n"
" * @return string corresponding to the information about the raster "
"dataset.\n"
" * It must be freed using CPLFree().\n"
" *\n"
" * @since GDAL 2.1\n"
" */\n"
"char CPL_DLL *GDALInfo( GDALDatasetH hDataset, const GDALInfoOptions "
"*psOptions );"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:83
msgid "Similarly for GDALTranslate():"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:87
msgid ""
"/*! Options for GDALTranslate(). Opaque type */\n"
"typedef struct GDALTranslateOptions GDALTranslateOptions;\n"
"typedef struct GDALTranslateOptionsForBinary GDALTranslateOptionsForBinary;\n"
"\n"
"GDALTranslateOptions CPL_DLL *GDALTranslateOptionsNew(char** papszArgv,\n"
"                                                      GDALTranslateOptionsForBinary* "
"psOptionsForBinary);\n"
"\n"
"void CPL_DLL GDALTranslateOptionsFree( GDALTranslateOptions *psOptions );\n"
"\n"
"void CPL_DLL GDALTranslateOptionsSetProgress( GDALTranslateOptions "
"*psOptions,\n"
"                                              GDALProgressFunc pfnProgress,\n"
"                                              void *pProgressData );\n"
"\n"
"GDALDatasetH CPL_DLL GDALTranslate(const char *pszDestFilename,\n"
"                                   GDALDatasetH hSrcDataset,\n"
"                                   const GDALTranslateOptions *psOptions,\n"
"                                   int *pbUsageError);"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:105
msgid "Similarly for GDALWarp():"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:109
msgid ""
"/*! Options for GDALWarp(). Opaque type */\n"
"typedef struct GDALWarpAppOptions GDALWarpAppOptions;\n"
"\n"
"typedef struct GDALWarpAppOptionsForBinary GDALWarpAppOptionsForBinary;\n"
"\n"
"GDALWarpAppOptions CPL_DLL *GDALWarpAppOptionsNew(char** papszArgv,\n"
"                                                      GDALWarpAppOptionsForBinary* "
"psOptionsForBinary);\n"
"\n"
"void CPL_DLL GDALWarpAppOptionsFree( GDALWarpAppOptions *psOptions );\n"
"\n"
"void CPL_DLL GDALWarpAppOptionsSetProgress( GDALWarpAppOptions *psOptions,\n"
"                                              GDALProgressFunc pfnProgress,\n"
"                                              void *pProgressData );\n"
"void CPL_DLL GDALWarpAppOptionsSetWarpOption( GDALWarpAppOptions "
"*psOptions,\n"
"                                              const char* pszKey,\n"
"                                              const char* pszValue );\n"
"\n"
"GDALDatasetH CPL_DLL GDALWarp( const char *pszDest, GDALDatasetH hDstDS, int "
"nSrcCount,\n"
"                               GDALDatasetH *pahSrcDS,\n"
"                               const GDALWarpAppOptions *psOptions, int "
"*pbUsageError );"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:130
msgid "Similarly for GDALVectorTranslate() (equivalent of ogr2ogr):"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:134
msgid ""
"/*! Options for GDALVectorTranslate(). Opaque type */\n"
"typedef struct GDALVectorTranslateOptions GDALVectorTranslateOptions;\n"
"\n"
"typedef struct GDALVectorTranslateOptionsForBinary "
"GDALVectorTranslateOptionsForBinary;\n"
"\n"
"GDALVectorTranslateOptions CPL_DLL *GDALVectorTranslateOptionsNew(char** "
"papszArgv,\n"
"                                                      GDALVectorTranslateOptionsForBinary* "
"psOptionsForBinary);\n"
"\n"
"void CPL_DLL GDALVectorTranslateOptionsFree( GDALVectorTranslateOptions "
"*psOptions );\n"
"\n"
"void CPL_DLL "
"GDALVectorTranslateOptionsSetProgress( GDALVectorTranslateOptions "
"*psOptions,\n"
"                                              GDALProgressFunc pfnProgress,\n"
"                                              void *pProgressData );\n"
"\n"
"GDALDatasetH CPL_DLL GDALVectorTranslate( const char *pszDest, GDALDatasetH "
"hDstDS, int nSrcCount,\n"
"                               GDALDatasetH *pahSrcDS,\n"
"                               const GDALVectorTranslateOptions *psOptions, "
"int *pbUsageError );"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:152
msgid ""
"For other utilities, see `gdal_utils.h <http://svn.osgeo.org/gdal/trunk/gdal/"
"apps/gdal_utils.h>`__"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:156
msgid "SWIG bindings (Python / Java / C# / Perl) changes"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:159
msgid "All bindings"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:161
msgid "For all bindings, the above functions are mapped to SWIG with :"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:166
msgid ""
"struct GDALInfoOptions {\n"
"%extend {\n"
"    GDALInfoOptions(char** options) {\n"
"        return GDALInfoOptionsNew(options, NULL);\n"
"    }\n"
"\n"
"    ~GDALInfoOptions() {\n"
"        GDALInfoOptionsFree( self );\n"
"    }\n"
"}\n"
"};\n"
"\n"
"%rename (InfoInternal) GDALInfo;\n"
"char *GDALInfo( GDALDatasetShadow *hDataset, GDALInfoOptions *infoOptions );"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:183
msgid ""
"struct GDALTranslateOptions {\n"
"%extend {\n"
"    GDALTranslateOptions(char** options) {\n"
"        return GDALTranslateOptionsNew(options, NULL);\n"
"    }\n"
"\n"
"    ~GDALTranslateOptions() {\n"
"        GDALTranslateOptionsFree( self );\n"
"    }\n"
"}\n"
"};\n"
"\n"
"%rename (TranslateInternal) wrapper_GDALTranslate;\n"
"%newobject wrapper_GDALTranslate;\n"
"\n"
"%inline %{\n"
"GDALDatasetShadow* wrapper_GDALTranslate( const char* dest,\n"
"                                      GDALDatasetShadow* dataset,\n"
"                                      GDALTranslateOptions* "
"translateOptions,\n"
"                                      GDALProgressFunc callback=NULL,\n"
"                                      void* callback_data=NULL);"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:207
msgid ""
"struct GDALWarpAppOptions {\n"
"%extend {\n"
"    GDALWarpAppOptions(char** options) {\n"
"        return GDALWarpAppOptionsNew(options, NULL);\n"
"    }\n"
"\n"
"    ~GDALWarpAppOptions() {\n"
"        GDALWarpAppOptionsFree( self );\n"
"    }\n"
"}\n"
"};\n"
"\n"
"/* Note: we must use 2 distinct names since there's a bug/feature in swig "
"*/\n"
"/* that doesn't play nicely with the (int object_list_count, "
"GDALDatasetShadow** poObjects) input typemap */\n"
"\n"
"%inline %{\n"
"int wrapper_GDALWarpDestDS( GDALDatasetShadow* dstDS,\n"
"                            int object_list_count, GDALDatasetShadow** "
"poObjects,\n"
"                            GDALWarpAppOptions* warpAppOptions,\n"
"                            GDALProgressFunc callback=NULL,\n"
"                            void* callback_data=NULL),\n"
"%}\n"
"\n"
"%newobject wrapper_GDALWarpDestName;\n"
"\n"
"%inline %{\n"
"GDALDatasetShadow* wrapper_GDALWarpDestName( const char* dest,\n"
"                                             int object_list_count, "
"GDALDatasetShadow** poObjects,\n"
"                                             GDALWarpAppOptions* "
"warpAppOptions,\n"
"                                             GDALProgressFunc "
"callback=NULL,\n"
"                                             void* callback_data=NULL),\n"
"%}"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:243
msgid ""
"struct GDALVectorTranslateOptions {\n"
"%extend {\n"
"    GDALVectorTranslateOptions(char** options) {\n"
"        return GDALVectorTranslateOptionsNew(options, NULL);\n"
"    }\n"
"\n"
"    ~GDALVectorTranslateOptions() {\n"
"        GDALVectorTranslateOptionsFree( self );\n"
"    }\n"
"}\n"
"};\n"
"\n"
"/* Note: we must use 2 distinct names since there's a bug/feature in swig "
"*/\n"
"/* that doesn't play nicely with the (int object_list_count, "
"GDALDatasetShadow** poObjects) input typemap */\n"
"\n"
"%inline %{\n"
"int wrapper_GDALVectorTranslateDestDS( GDALDatasetShadow* dstDS,\n"
"                                       GDALDatasetShadow* srcDS,\n"
"                            GDALVectorTranslateOptions* options,\n"
"                            GDALProgressFunc callback=NULL,\n"
"                            void* callback_data=NULL);\n"
"%}\n"
"\n"
"%newobject wrapper_GDALVectorTranslateDestName;\n"
"\n"
"%inline %{\n"
"GDALDatasetShadow* wrapper_GDALVectorTranslateDestName( const char* dest,\n"
"                                             GDALDatasetShadow* srcDS,\n"
"                                             GDALVectorTranslateOptions* "
"options,\n"
"                                             GDALProgressFunc "
"callback=NULL,\n"
"                                             void* callback_data=NULL);\n"
"%}"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:276
msgid ""
"For other utilities, see `gdal.i <http://svn.osgeo.org/gdal/trunk/gdal/swig/"
"python/gdal.i>`__"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:280
msgid "Python bindings"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:282
msgid ""
"For Python bindings, convenience wrappers are created to allow specifying "
"options in a more user friendly way."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:287
msgid ""
"def InfoOptions(options = [], format = 'text', deserialize = True,\n"
"         computeMinMax = False, reportHistograms = False, reportProj4 = "
"False,\n"
"         stats = False, approxStats = False, computeChecksum = False,\n"
"         showGCPs = True, showMetadata = True, showRAT = True, "
"showColorTable = True,\n"
"         listMDD = False, showFileList = True, allMetadata = False,\n"
"         extraMDDomains = None):\n"
"    \"\"\" Create a InfoOptions() object that can be passed to gdal.Info()\n"
"        options can be be an array of strings, a string or let empty and "
"filled from other keywords.\"\"\"\n"
"\n"
"\n"
"def Info(ds, **kwargs):\n"
"    \"\"\" Return information on a dataset.\n"
"        Arguments are :\n"
"          ds --- a Dataset object or a filename\n"
"        Keyword arguments are :\n"
"          options --- return of gdal.InfoOptions(), string or array of "
"strings\n"
"          other keywords arguments of gdal.InfoOptions()\n"
"        If options is provided as a gdal.InfoOptions() object, other "
"keywords are ignored. \"\"\""
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:306
msgid ""
"gdal.Info() can be used either with setting the attributes of gdal."
"InfoOptions() or inlined arguments of gdal.Info(). Arguments can be "
"specified as array of strings, command line syntax or dedeicated keywords. "
"So various combinations are possible :"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:313
msgid ""
"options = gdal.InfoOptions(format = 'json', computeChecksum = True)\n"
"gdal.Info(ds, options)"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:318
msgid ""
"options = gdal.InfoOptions(options = ['-json', '-checksum'])\n"
"gdal.Info(ds, options)"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:323
msgid ""
"options = gdal.InfoOptions(options = '-json -checksum')\n"
"gdal.Info(ds, options)"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:328
msgid "gdal.Info(ds, format = 'json', computeChecksum = True)"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:332
msgid "gdal.Info(ds, options = ['-json', '-checksum'])"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:336
msgid "gdal.Info(ds, options = '-json -checksum')"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:340
msgid ""
"def TranslateOptions(options = [], format = 'GTiff',\n"
"              outputType = GDT_Unknown, bandList = None, maskBand = None,\n"
"              width = 0, height = 0, widthPct = 0.0, heightPct = 0.0,\n"
"              xRes = 0.0, yRes = 0.0,\n"
"              creationOptions = None, srcWin = None, projWin = None, "
"projWinSRS = None, strict = False,\n"
"              unscale = False, scaleParams = None, exponents = None,\n"
"              outputBounds = None, metadataOptions = None,\n"
"              outputSRS = None, GCPs = None,\n"
"              noData = None, rgbExpand = None,\n"
"              stats = False, rat = True, resampleAlg = None,\n"
"              callback = None, callback_data = None):\n"
"    \"\"\" Create a TranslateOptions() object that can be passed to gdal."
"Translate()\n"
"        Keyword arguments are :\n"
"          options --- can be be an array of strings, a string or let empty "
"and filled from other keywords.\n"
"          format --- output format (\"GTiff\", etc...)\n"
"          outputType --- output type (gdal.GDT_Byte, etc...)\n"
"          bandList --- array of band numbers (index start at 1)\n"
"          maskBand --- mask band to generate or not (\"none\", \"auto\", "
"\"mask\", 1, ...)\n"
"          width --- width of the output raster in pixel\n"
"          height --- height of the output raster in pixel\n"
"          widthPct --- width of the output raster in percentage (100 = "
"original width)\n"
"          heightPct --- height of the output raster in percentage (100 = "
"original height)\n"
"          xRes --- output horizontal resolution\n"
"          yRes --- output vertical resolution\n"
"          creationOptions --- list of creation options\n"
"          srcWin --- subwindow in pixels to extract: [left_x, top_y, width, "
"height]\n"
"          projWin --- subwindow in projected coordinates to extract: [ulx, "
"uly, lrx, lry]\n"
"          projWinSRS --- SRS in which projWin is expressed\n"
"          strict --- strict mode\n"
"          unscale --- unscale values with scale and offset metadata\n"
"          scaleParams --- list of scale parameters, each of the form "
"[src_min,src_max] or [src_min,src_max,dst_min,dst_max]\n"
"          exponents --- list of exponentiation parameters\n"
"          outputBounds --- assigned output bounds: [ulx, uly, lrx, lry]\n"
"          metadataOptions --- list of metadata options\n"
"          outputSRS --- assigned output SRS\n"
"          GCPs --- list of GCPs\n"
"          noData --- nodata value (or \"none\" to unset it)\n"
"          rgbExpand --- Color palette expansion mode: \"gray\", \"rgb\", "
"\"rgba\"\n"
"          stats --- whether to calcule statistics\n"
"          rat --- whether to write source RAT\n"
"          resampleAlg --- resampling mode\n"
"          callback --- callback method\n"
"          callback_data --- user data for callback\n"
"    \"\"\"\n"
"\n"
"def Translate(destName, srcDS, **kwargs):\n"
"    \"\"\" Convert a dataset.\n"
"        Arguments are :\n"
"          destName --- Output dataset name\n"
"          srcDS --- a Dataset object or a filename\n"
"        Keyword arguments are :\n"
"          options --- return of gdal.InfoOptions(), string or array of "
"strings\n"
"          other keywords arguments of gdal.TranslateOptions()\n"
"        If options is provided as a gdal.TranslateOptions() object, other "
"keywords are ignored. \"\"\""
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:398
msgid ""
"def WarpOptions(options = [], format = 'GTiff',\n"
"         outputBounds = None,\n"
"         outputBoundsSRS = None,\n"
"         xRes = None, yRes = None, targetAlignedPixels = False,\n"
"         width = 0, height = 0,\n"
"         srcSRS = None, dstSRS = None,\n"
"         srcAlpha = False, dstAlpha = False,\n"
"         warpOptions = None, errorThreshold = None,\n"
"         warpMemoryLimit = None, creationOptions = None, outputType = "
"GDT_Unknown,\n"
"         workingType = GDT_Unknown, resampleAlg = None,\n"
"         srcNodata = None, dstNodata = None, multithread = False,\n"
"         tps = False, rpc = False, geoloc = False, polynomialOrder = None,\n"
"         transformerOptions = None, cutlineDSName = None,\n"
"         cutlineLayer = None, cutlineWhere = None, cutlineSQL = None, "
"cutlineBlend = None, cropToCutline = False,\n"
"         copyMetadata = True, metadataConflictValue = None,\n"
"         setColorInterpretation = False,\n"
"         callback = None, callback_data = None):\n"
"    \"\"\" Create a WarpOptions() object that can be passed to gdal.Warp()\n"
"        Keyword arguments are :\n"
"          options --- can be be an array of strings, a string or let empty "
"and filled from other keywords.\n"
"          format --- output format (\"GTiff\", etc...)\n"
"          outputBounds --- output bounds as (minX, minY, maxX, maxY) in "
"target SRS\n"
"          outputBoundsSRS --- SRS in which output bounds are expressed, in "
"the case they are not expressed in dstSRS\n"
"          xRes, yRes --- output resolution in target SRS\n"
"          targetAlignedPixels --- whether to force output bounds to be "
"multiple of output resolution\n"
"          width --- width of the output raster in pixel\n"
"          height --- height of the output raster in pixel\n"
"          srcSRS --- source SRS\n"
"          dstSRS --- output SRS\n"
"          srcAlpha --- whether to force the last band of the input dataset "
"to be considered as an alpha band\n"
"          dstAlpha --- whether to force the creation of an output alpha "
"band\n"
"          outputType --- output type (gdal.GDT_Byte, etc...)\n"
"          workingType --- working type (gdal.GDT_Byte, etc...)\n"
"          warpOptions --- list of warping options\n"
"          errorThreshold --- error threshold for approximation transformer "
"(in pixels)\n"
"          warpMemoryLimit --- size of working buffer in bytes\n"
"          resampleAlg --- resampling mode\n"
"          creationOptions --- list of creation options\n"
"          srcNodata --- source nodata value(s)\n"
"          dstNodata --- output nodata value(s)\n"
"          multithread --- whether to multithread computation and I/O "
"operations\n"
"          tps --- whether to use Thin Plate Spline GCP transformer\n"
"          rpc --- whether to use RPC transformer\n"
"          geoloc --- whether to use GeoLocation array transformer\n"
"          polynomialOrder --- order of polynomial GCP interpolation\n"
"          transformerOptions --- list of transformer options\n"
"          cutlineDSName --- cutline dataset name\n"
"          cutlineLayer --- cutline layer name\n"
"          cutlineWhere --- cutline WHERE clause\n"
"          cutlineSQL --- cutline SQL statement\n"
"          cutlineBlend --- cutline blend distance in pixels\n"
"          cropToCutline --- whether to use cutline extent for output bounds\n"
"          copyMetadata --- whether to copy source metadata\n"
"          metadataConflictValue --- metadata data conflict value\n"
"          setColorInterpretation --- whether to force color interpretation "
"of input bands to output bands\n"
"          callback --- callback method\n"
"          callback_data --- user data for callback\n"
"    \"\"\"\n"
"\n"
"def Warp(destNameOrDestDS, srcDSOrSrcDSTab, **kwargs):\n"
"    \"\"\" Warp one or several datasets.\n"
"        Arguments are :\n"
"          destNameOrDestDS --- Output dataset name or object\n"
"          srcDSOrSrcDSTab --- an array of Dataset objects or filenames, or a "
"Dataset object or a filename\n"
"        Keyword arguments are :\n"
"          options --- return of gdal.InfoOptions(), string or array of "
"strings\n"
"          other keywords arguments of gdal.WarpOptions()\n"
"        If options is provided as a gdal.WarpOptions() object, other "
"keywords are ignored. \"\"\""
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:470
msgid ""
"def VectorTranslateOptions(options = [], format = 'ESRI Shapefile',\n"
"         accessMode = None,\n"
"         srcSRS = None, dstSRS = None, reproject = True,\n"
"         SQLStatement = None, SQLDialect = None, where = None, selectFields "
"= None, spatFilter = None,\n"
"         datasetCreationOptions = None,\n"
"         layerCreationOptions = None,\n"
"         layers = None,\n"
"         layerName = None,\n"
"         geometryType = None,\n"
"         segmentizeMaxDist= None,\n"
"         callback = None, callback_data = None):\n"
"    \"\"\" Create a VectorTranslateOptions() object that can be passed to "
"gdal.VectorTranslate()\n"
"        Keyword arguments are :\n"
"          options --- can be be an array of strings, a string or let empty "
"and filled from other keywords.\n"
"          format --- output format (\"ESRI Shapefile\", etc...)\n"
"          accessMode --- None for creation, 'update', 'append', 'overwrite'\n"
"          srcSRS --- source SRS\n"
"          dstSRS --- output SRS (with reprojection if reproject = True)\n"
"          reproject --- whether to do reprojection\n"
"          SQLStatement --- SQL statement to apply to the source dataset\n"
"          SQLDialect --- SQL dialect ('OGRSQL', 'SQLITE', ...)\n"
"          where --- WHERE clause to apply to source layer(s)\n"
"          selectFields --- list of fields to select\n"
"          spatFilter --- spatial filter as (minX, minY, maxX, maxY) bounding "
"box\n"
"          datasetCreationOptions --- list of dataset creation options\n"
"          layerCreationOptions --- list of layer creation options\n"
"          layers --- list of layers to convert\n"
"          layerName --- output layer name\n"
"          geometryType --- output layer geometry type ('POINT', ....)\n"
"          segmentizeMaxDist --- maximum distance between consecutive nodes "
"of a line geometry\n"
"          callback --- callback method\n"
"          callback_data --- user data for callback\n"
"    \"\"\"\n"
"\n"
"def VectorTranslate(destNameOrDestDS, srcDS, **kwargs):\n"
"    \"\"\" Convert one vector dataset\n"
"        Arguments are :\n"
"          destNameOrDestDS --- Output dataset name or object\n"
"          srcDS --- a Dataset object or a filename\n"
"        Keyword arguments are :\n"
"          options --- return of gdal.InfoOptions(), string or array of "
"strings\n"
"          other keywords arguments of gdal.VectorTranslateOptions()\n"
"        If options is provided as a gdal.VectorTranslateOptions() object, "
"other keywords are ignored. \"\"\""
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:517
msgid ""
"def DEMProcessingOptions(options = [], colorFilename = None, format = "
"'GTiff',\n"
"              creationOptions = None, computeEdges = False, alg = 'Horn', "
"band = 1,\n"
"              zFactor = None, scale = None, azimuth = None, altitude = None, "
"combined = False,\n"
"              slopeFormat = None, trigonometric = False, zeroForFlat = "
"False,\n"
"              callback = None, callback_data = None):\n"
"    \"\"\" Create a DEMProcessingOptions() object that can be passed to gdal."
"DEMProcessing()\n"
"        Keyword arguments are :\n"
"          options --- can be be an array of strings, a string or let empty "
"and filled from other keywords.\n"
"          colorFilename --- (mandatory for \"color-relief\") name of file "
"that contains palette definition for the \"color-relief\" processing.\n"
"          format --- output format (\"GTiff\", etc...)\n"
"          creationOptions --- list of creation options\n"
"          computeEdges --- whether to compute values at raster edges.\n"
"          alg --- 'ZevenbergenThorne' or 'Horn'\n"
"          band --- source band number to use\n"
"          zFactor --- (hillshade only) vertical exaggeration used to pre-"
"multiply the elevations.\n"
"          scale --- ratio of vertical units to horizontal.\n"
"          azimuth --- (hillshade only) azimuth of the light, in degrees. 0 "
"if it comes from the top of the raster, 90 from the east, ... The default "
"value, 315, should rarely be changed as it is the value generally used to "
"generate shaded maps.\n"
"          altitude ---(hillshade only) altitude of the light, in degrees. 90 "
"if the light comes from above the DEM, 0 if it is raking light.\n"
"          combined --- (hillshade only) whether to compute combined shading, "
"a combination of slope and oblique shading.\n"
"          slopeformat --- (slope only) \"degree\" or \"percent\".\n"
"          trigonometric --- (aspect only) whether to return trigonometric "
"angle instead of azimuth. Thus 0deg means East, 90deg North, 180deg West, "
"270deg South.\n"
"          zeroForFlat --- (aspect only) whether to return 0 for flat areas "
"with slope=0, instead of -9999.\n"
"          callback --- callback method\n"
"          callback_data --- user data for callback\n"
"    \"\"\"\n"
"\n"
"def DEMProcessing(destName, srcDS, processing, **kwargs):\n"
"    \"\"\" Apply a DEM processing.\n"
"        Arguments are :\n"
"          destName --- Output dataset name\n"
"          srcDS --- a Dataset object or a filename\n"
"          processing --- one of \"hillshade\", \"slope\", \"aspect\", "
"\"color-relief\", \"TRI\", \"TPI\", \"Roughness\"\n"
"        Keyword arguments are :\n"
"          options --- return of gdal.InfoOptions(), string or array of "
"strings\n"
"          other keywords arguments of gdal.DEMProcessingOptions()\n"
"        If options is provided as a gdal.DEMProcessingOptions() object, "
"other keywords are ignored. \"\"\""
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:556
msgid ""
"def NearblackOptions(options = [], format = 'GTiff',\n"
"         creationOptions = None, white = False, colors = None,\n"
"         maxNonBlack = None, nearDist = None, setAlpha = False, setMask = "
"False,\n"
"         callback = None, callback_data = None):\n"
"    \"\"\" Create a NearblackOptions() object that can be passed to gdal."
"Nearblack()\n"
"        Keyword arguments are :\n"
"          options --- can be be an array of strings, a string or let empty "
"and filled from other keywords.\n"
"          format --- output format (\"GTiff\", etc...)\n"
"          creationOptions --- list of creation options\n"
"          white --- whether to search for nearly white (255) pixels instead "
"of nearly black pixels.\n"
"          colors --- list of colors  to search for, e.g. ((0,0,0),"
"(255,255,255)). The pixels that are considered as the collar are set to 0\n"
"          maxNonBlack --- number of non-black (or other searched colors "
"specified with white / colors) pixels that can be encountered before the "
"giving up search inwards. Defaults to 2.\n"
"          nearDist --- select how far from black, white or custom colors the "
"pixel values can be and still considered near black, white or custom color.  "
"Defaults to 15.\n"
"          setAlpha --- adds an alpha band if the output file.\n"
"          setMask --- adds a mask band to the output file.\n"
"          callback --- callback method\n"
"          callback_data --- user data for callback\n"
"    \"\"\"\n"
"\n"
"def Nearblack(destNameOrDestDS, srcDS, **kwargs):\n"
"    \"\"\" Convert nearly black/white borders to exact value.\n"
"        Arguments are :\n"
"          destNameOrDestDS --- Output dataset name or object\n"
"          srcDS --- a Dataset object or a filename\n"
"        Keyword arguments are :\n"
"          options --- return of gdal.InfoOptions(), string or array of "
"strings\n"
"          other keywords arguments of gdal.NearblackOptions()\n"
"        If options is provided as a gdal.NearblackOptions() object, other "
"keywords are ignored. \"\"\""
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:587
msgid ""
"def GridOptions(options = [], format = 'GTiff',\n"
"              outputType = GDT_Unknown,\n"
"              width = 0, height = 0,\n"
"              creationOptions = None,\n"
"              outputBounds = None,\n"
"              outputSRS = None,\n"
"              noData = None,\n"
"              algorithm = None,\n"
"              layers = None,\n"
"              SQLStatement = None,\n"
"              where = None,\n"
"              spatFilter = None,\n"
"              zfield = None,\n"
"              z_increase = None,\n"
"              z_multiply = None,\n"
"              callback = None, callback_data = None):\n"
"    \"\"\" Create a GridOptions() object that can be passed to gdal.Grid()\n"
"        Keyword arguments are :\n"
"          options --- can be be an array of strings, a string or let empty "
"and filled from other keywords.\n"
"          format --- output format (\"GTiff\", etc...)\n"
"          outputType --- output type (gdal.GDT_Byte, etc...)\n"
"          width --- width of the output raster in pixel\n"
"          height --- height of the output raster in pixel\n"
"          creationOptions --- list of creation options\n"
"          outputBounds --- assigned output bounds: [ulx, uly, lrx, lry]\n"
"          outputSRS --- assigned output SRS\n"
"          noData --- nodata value\n"
"          algorithm --- e.g \"invdist:power=2.0:smoothing=0.0:radius1=0.0:"
"radius2=0.0:angle=0.0:max_points=0:min_points=0:nodata=0.0\"\n"
"          layers --- list of layers to convert\n"
"          SQLStatement --- SQL statement to apply to the source dataset\n"
"          where --- WHERE clause to apply to source layer(s)\n"
"          spatFilter --- spatial filter as (minX, minY, maxX, maxY) bounding "
"box\n"
"          zfield --- Identifies an attribute field on the features to be "
"used to get a Z value from. This value overrides Z value read from feature "
"geometry record.\n"
"          z_increase --- Addition to the attribute field on the features to "
"be used to get a Z value from. The addition should be the same unit as Z "
"value. The result value will be Z value + Z increase value. The default "
"value is 0.\n"
"          z_multiply - Multiplication ratio for Z field. This can be used "
"for shift from e.g. foot to meters or from  elevation to deep. The result "
"value will be (Z value + Z increase value) * Z multiply value.  The default "
"value is 1.\n"
"          callback --- callback method\n"
"          callback_data --- user data for callback\n"
"    \"\"\"\n"
"\n"
"def Grid(destName, srcDS, **kwargs):\n"
"    \"\"\" Create raster from the scattered data.\n"
"        Arguments are :\n"
"          destName --- Output dataset name\n"
"          srcDS --- a Dataset object or a filename\n"
"        Keyword arguments are :\n"
"          options --- return of gdal.InfoOptions(), string or array of "
"strings\n"
"          other keywords arguments of gdal.GridOptions()\n"
"        If options is provided as a gdal.GridOptions() object, other "
"keywords are ignored. \"\"\""
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:638
msgid ""
"def RasterizeOptions(options = [], format = None,\n"
"         creationOptions = None, noData = None, initValues = None,\n"
"         outputBounds = None, outputSRS = None,\n"
"         width = None, height = None,\n"
"         xRes = None, yRes = None, targetAlignedPixels = False,\n"
"         bands = None, inverse = False, allTouched = False,\n"
"         burnValues = None, attribute = None, useZ = False, layers = None,\n"
"         SQLStatement = None, SQLDialect = None, where = None,\n"
"         callback = None, callback_data = None):\n"
"    \"\"\" Create a RasterizeOptions() object that can be passed to gdal."
"Rasterize()\n"
"        Keyword arguments are :\n"
"          options --- can be be an array of strings, a string or let empty "
"and filled from other keywords.\n"
"          format --- output format (\"GTiff\", etc...)\n"
"          creationOptions --- list of creation options\n"
"          outputBounds --- assigned output bounds: [minx, miny, maxx, maxy]\n"
"          outputSRS --- assigned output SRS\n"
"          width --- width of the output raster in pixel\n"
"          height --- height of the output raster in pixel\n"
"          xRes, yRes --- output resolution in target SRS\n"
"          targetAlignedPixels --- whether to force output bounds to be "
"multiple of output resolution\n"
"          noData --- nodata value\n"
"          initValues --- Value or list of values to pre-initialize the "
"output image bands with.  However, it is not marked as the nodata value in "
"the output file.  If only one value is given, the same value is used in all "
"the bands.\n"
"          bands --- list of output bands to burn values into\n"
"          inverse --- whether to invert rasterization, ie burn the fixed "
"burn value, or the burn value associated  with the first feature into all "
"parts of the image not inside the provided a polygon.\n"
"          allTouched -- whether to enable the ALL_TOUCHED rasterization "
"option so that all pixels touched by lines or polygons will be updated, not "
"just those on the line render path, or whose center point is within the "
"polygon.\n"
"          burnValues -- list of fixed values to burn into each band for all "
"objects. Excusive with attribute.\n"
"          attribute --- identifies an attribute field on the features to be "
"used for a burn-in value. The value will be burned into all output bands. "
"Excusive with burnValues.\n"
"          useZ --- whether to indicate that a burn value should be extracted "
"from the \"Z\" values of the feature. These values are added to the burn "
"value given by burnValues or attribute if provided. As of now, only points "
"and lines are drawn in 3D.\n"
"          layers --- list of layers from the datasource that will be used "
"for input features.\n"
"          SQLStatement --- SQL statement to apply to the source dataset\n"
"          SQLDialect --- SQL dialect ('OGRSQL', 'SQLITE', ...)\n"
"          where --- WHERE clause to apply to source layer(s)\n"
"          callback --- callback method\n"
"          callback_data --- user data for callback\n"
"    \"\"\"\n"
"\n"
"def Rasterize(destNameOrDestDS, srcDS, **kwargs):\n"
"    \"\"\" Burns vector geometries into a raster\n"
"        Arguments are :\n"
"          destNameOrDestDS --- Output dataset name or object\n"
"          srcDS --- a Dataset object or a filename\n"
"        Keyword arguments are :\n"
"          options --- return of gdal.InfoOptions(), string or array of "
"strings\n"
"          other keywords arguments of gdal.RasterizeOptions()\n"
"        If options is provided as a gdal.RasterizeOptions() object, other "
"keywords are ignored. \"\"\""
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:686
msgid ""
"def BuildVRTOptions(options = [],\n"
"                    resolution = None,\n"
"                    outputBounds = None,\n"
"                    xRes = None, yRes = None,\n"
"                    targetAlignedPixels = None,\n"
"                    separate = None,\n"
"                    bandList = None,\n"
"                    addAlpha = None,\n"
"                    resampleAlg = None,\n"
"                    outputSRS = None,\n"
"                    allowProjectionDifference = None,\n"
"                    srcNodata = None,\n"
"                    VRTNodata = None,\n"
"                    hideNodata = None,\n"
"                    callback = None, callback_data = None):\n"
"    \"\"\" Create a BuildVRTOptions() object that can be passed to gdal."
"BuildVRT()\n"
"        Keyword arguments are :\n"
"          options --- can be be an array of strings, a string or let empty "
"and filled from other keywords..\n"
"          resolution --- 'highest', 'lowest', 'average', 'user'.\n"
"          outputBounds --- output bounds as (minX, minY, maxX, maxY) in "
"target SRS.\n"
"          xRes, yRes --- output resolution in target SRS.\n"
"          targetAlignedPixels --- whether to force output bounds to be "
"multiple of output resolution.\n"
"          separate --- whether each source file goes into a separate stacked "
"band in the VRT band.\n"
"          bandList --- array of band numbers (index start at 1).\n"
"          addAlpha --- whether to add an alpha mask band to the VRT when the "
"source raster have none.\n"
"          resampleAlg --- resampling mode.\n"
"          outputSRS --- assigned output SRS.\n"
"          allowProjectionDifference --- whether to accept input datasets "
"have not the same projection. Note: they will *not* be reprojected.\n"
"          srcNodata --- source nodata value(s).\n"
"          VRTNodata --- nodata values at the VRT band level.\n"
"          hideNodata --- whether to make the VRT band not report the NoData "
"value.\n"
"          callback --- callback method.\n"
"          callback_data --- user data for callback.\n"
"    \"\"\"\n"
"\n"
"def BuildVRT(destName, srcDSOrSrcDSTab, **kwargs):\n"
"    \"\"\" Build a VRT from a list of datasets.\n"
"        Arguments are :\n"
"          destName --- Output dataset name\n"
"          srcDSOrSrcDSTab --- an array of Dataset objects or filenames, or a "
"Dataset object or a filename\n"
"        Keyword arguments are :\n"
"          options --- return of gdal.InfoOptions(), string or array of "
"strings\n"
"          other keywords arguments of gdal.BuildVRTOptions()\n"
"        If options is provided as a gdal.BuildVRTOptions() object, other "
"keywords are ignored. \"\"\""
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:732
msgid "Utilities"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:734
msgid "Utilities are modified to call the respective function."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:737
msgid "Documentation"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:739
msgid "All new methods/functions are documented."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:742
msgid "Test Suite"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:744
msgid ""
"gdal.Info method is tested in `test_gdalinfo_lib.py <http://svn.osgeo.org/"
"gdal/trunk/autotest/utilities/test_gdalinfo_lib.py>`__."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:747
msgid ""
"gdal.Translate method is tested in `test_gdal_translate_lib.py <http://svn."
"osgeo.org/gdal/trunk/autotest/utilities/test_gdal_translate_lib.py>`__"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:750
msgid ""
"gdal.Warp method is tested in `test_gdalwarp_lib.py <http://svn.osgeo.org/"
"gdal/trunk/autotest/utilities/test_gdalwarp_lib.py>`__"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:753
msgid ""
"gdal.VectorTranslate method is tested in `test_ogr2ogr_lib.py <http://svn."
"osgeo.org/gdal/trunk/autotest/utilities/test_ogr2ogr_lib.py>`__"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:756
msgid ""
"gdal.DEMProcessing method is tested in `test_gdaldem_lib.py <http://svn."
"osgeo.org/gdal/trunk/autotest/utilities/test_gdaldem_lib.py>`__"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:759
msgid ""
"gdal.Nearblack method is tested in `test_nearblack_lib.py <http://svn.osgeo."
"org/gdal/trunk/autotest/utilities/test_nearblack_lib.py>`__"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:762
msgid ""
"gdal.Grid method is tested in `test_gdal_grid_lib.py <http://svn.osgeo.org/"
"gdal/trunk/autotest/utilities/test_gdal_grid_lib.py>`__"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:765
msgid ""
"gdal.Rasterize method is tested in `test_gdal_rasterize_lib.py <http://svn."
"osgeo.org/gdal/trunk/autotest/utilities/test_gdal_rasterize_lib.py>`__."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:768
msgid ""
"gdal.BuildVRT method is tested in `test_gdalbuildvrt_lib.py <http://svn."
"osgeo.org/gdal/trunk/autotest/utilities/test_gdalbuildvrt_lib.py>`__."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:772
msgid "Compatibility Issues"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:774
msgid ""
"None expected. Command line utilities will keep the same interface. It will "
"be checked by ensuring their tests in autotest/utilities still pass."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:779
msgid "Related ticket"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:782
msgid "Implementation"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:784
msgid "Implementation will be done by Faza Mahamood and Even Rouault"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:786
msgid ""
"The proposed implementation for gdalinfo and gdal_translate lies in the "
"\"rfc59.1\" branch of the `https://github.com/rouault/gdal2/tree/rfc59.1 "
"<https://github.com/rouault/gdal2/tree/rfc59.1>`__."
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:791
msgid "Voting history"
msgstr ""

#: ../../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:793
msgid "+1 from DanielM and EvenR"
msgstr ""
